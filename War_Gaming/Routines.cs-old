using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.IO;
using System.Data;
using System.Collections;
using Microsoft.Office.Interop.Excel;
using System.Windows.Forms;
using System.Reflection;
using System.Text.RegularExpressions;

namespace WindowsFormsApplication2
{
    class Routines
    {
         //imported data
        public static string[] segmentList;         //gen data
        public static string[] oemList;             //gen data
        public static string[] fordVehList;         //gen data

        public static Macro[] population;
        public static string[] fordTransTypeList= new string[5]{"fleet","offrental","rental","rentalrisk","retail"}; 
        public static string[] allTransTypeList = new string[5]{"fleet","offrental","rental","rentalrisk","retail"}; 
        public static SGroupData[] sGroup;
        public static MGroupData[] mGroup;
        public static TGroupData[] tGroup;
        public static VehicleData[] vData;
        public static VehicleData[] Scenario;
        public static BaseDelta[] baseDelta;
        public static FordConstraint[] fordConstraints;
        public static FMCCdata[] fmcCData;
        public static Refresh[]  refresh;
        public static Volume[] planVolume;
     

        //gen data
        public static VehicleData[][] genVehData;
        public static VehicleData[][] genVehData_Fix;
        public static VehicleData[][] optData; // add by sz on 28/07
        public static VehicleData[][] optTMCData;
        public static FordConstraint[] genFCons;
        public static Macro[] genPopu;
        
        public static string[] otherVehList;
        public static string[] segOemName;
        public static string[] fordBrand = new string[2] { "FORD", "LINCOLN" }; //, "MERCURY" };
        
        //selected data
        public static int[] selTransYear;
        public static string[]     selSegmentList;
        public static SelSegment[] selFordVehList;      //segment+oem+" "+name
        public static SelSegment[] selOtherVehList;     //segment+oem+" "+name
        public static double omiga = 0.93;           //discount rate for all
        public static int numSelFordVeh = 0;  //add by sz for number of selected ford vehicle lines

        //edited data
        public static Macro[]  editpopulation;
        public static VehicleData[] editvData;
        public static BaseDelta[]   editbaseDelta;
        public static FordConstraint[] editfordConstraints;
        public static FMCCdata[]    editfmcCData;
        public static Refresh[]     editrefresh;
       
        public static VehicleData[] editgenVehData;
        public static FordConstraint[] editgenFCons;
        //cafe adjust
        public static cafeAdjust[] cafeAdjust;

        //init default
        private static int _baseYear = 2006;
        private static int _timeHorizon = 1;
        private static int _beginYear = 2007;
        private static int _linflag = 0; // add linerize price flag by sz
        private static int _adflag = 0; // add eliminating Ad flag by sz
        private static int _tmcflag = 0; // add terminal condition flag by sz
        private static int _tmcterm = 1; // add terminal condition length by sz

        private static int _optiType = 1; // add optimization type: TMC or Evolution, by DF on 11/29/2006
        private static int _PriceToVolume = 0;
        private static int _AdBgtFlag = 0; 
        private static int _fixRf = 1; 
        private static int _initialFix = 0; 
        private static int _reformedCAFE = 1;
        private static int _fixCompetitor = 0;
        //private static int _carSegChk = 1;
        //private static int _truckSegChk = 1;

        public static double[][] mshare = new double[Routines.timeHorizon][];
        public static double[][] sshare = new double[Routines.timeHorizon][];
        public static double[][] tshare = new double[Routines.timeHorizon][];
        public static double[][] Fmshare = new double[Routines.timeHorizon][];

        public static double[][] gasImpact = new double[Routines.timeHorizon][];
        public static double[][] gasImpactHEV = new double[Routines.timeHorizon][];
        public static double[][] incomeImpact = new double[Routines.timeHorizon][];

        public static int recentYear =1000; 
        public static int baseYear      { get { return _baseYear; }    set { _baseYear = value; } }
        public static int timeHorizon   { get { return _timeHorizon; } set { _timeHorizon = value; } }
        public static int beginYear { get { return _beginYear; } set { _beginYear = value; } }
        public static int linflag { get { return _linflag; } set { _linflag = value; } }
        public static int Adflag        { get { return _adflag; } set { _adflag = value; } }
        public static int tmcflag       { get { return _tmcflag; } set { _tmcflag = value; } }
        public static int tmcterm { get { return _tmcterm; } set { _tmcterm = value; } }

        public static int PriceToVolume { get { return _PriceToVolume; } set { _PriceToVolume = value; } }
        public static int optiType { get { return _optiType; } set { _optiType = value; } }
        public static int AdBgtFlag { get { return _AdBgtFlag; } set { _AdBgtFlag = value; } }
        public static int fixRF { get { return _fixRf; } set { _fixRf = value; } }
        public static int initialFix { get { return _initialFix; } set { _initialFix = value; } }
        public static int reformedCAFE { get { return _reformedCAFE; } set { _reformedCAFE = value; } }
        public static int fixCompetitor { get { return _fixCompetitor; } set { _fixCompetitor = value; } }
        //public static int carSegChk { get { return _carSegChk; } set { _carSegChk = value; } }
        //public static int truckSegChk { get { return _truckSegChk; } set { _truckSegChk = value; } }

        //excel sheet's name
        public static string[] xlsSheets ={ "macro",
            "sgroup","mgroup", "tgroup","vehdata","basedelta","fordconstraints","fmccdata","refresh","scenario", "cafeadjust"};//,"planvolume","fordtranstypelist","alltranstypelist", };
        public static string[][] shtNames = new string[xlsSheets.Length][];

        //search key list
        public static ArrayList listVData       = new ArrayList();   //oem+name+transyear+type    //vdata
        public static ArrayList listPlanVol = new ArrayList();   //oem+name+transyear+type    //volume
        public static ArrayList listScenario = new ArrayList();   //oem+name+transyear+type    
        public static ArrayList listFConstraints = new ArrayList();   //oem+name+transyear         //constraints
        public static ArrayList listRefresh     = new ArrayList();   //oem+name+refreshYear         //refresh
        public static ArrayList listLaunch = new ArrayList();   //oem+name+LaunchYear         //refresh
        public static ArrayList listBDelta = new ArrayList();   //oem+name+type              //basedelta
        public static ArrayList listFMCCData    = new ArrayList();   //oem+name                   //FMCCData
        public static ArrayList listPOPU        = new ArrayList();   //transyear                  //population  
        
        //new generated search keylist
        public static listnewvdata[] listNewVData;                  //oem+name+transyear+type    //genvehdata
        public static ArrayList listNewFCons = new ArrayList();      //oem+name+transyear         //genfCons

        public static ArrayList[] listOpt;    //add by sz
        //public static ArrayList[] listOptTM;    //add by sz

        //add for David reprograming
        
        public static int[,] vehTypeIdct;
        public static int[] vehTypeLen;
        public static string[] vehName;
        public static int vehTypeLenTot;

        public const double normalFactor = 3000.0 * 1000.0;
        public const int numVolumeVar = 4;
        public const int numAdVar = 2;
        public const int numBonusVar = 0;
        public const int numVariable = numVolumeVar + numAdVar + numBonusVar;
        public static double[] baseVol;
        public static double[] baseAdSp;

        //cafe adjust
        public static double[] truckAdjust;
        public static double[] truckAdjustReform;
        public static double[] carAdjust;
        public static double[] carAdjustReform;

        //public constants for Gasoline Price impact adjustment 
        public const double aaa = 0; //0.0854;  // 0.0899; //
        public const double bbb = 0; //-0.2649; // -0.3087; //

        //get object data for writing into excel
        private static object[,] getObjDataToEdit(string shtName, object[] shtHeader, string[] oemnames)    //David added on 7/26/2006
        {
            Regex sp = new Regex("( )");
            string[] shts = { "vehdata", "fordconstraints", "refresh", "basedelta", "fmccdata", "macro", "genvehdata", "genfcons" };
            int[] numSht = { vData.Length, fordConstraints.Length, refresh.Length, baseDelta.Length, fmcCData.Length, genPopu.Length, genVehData.Length, genFCons.Length };
            ArrayList selectedkeys = new ArrayList();
            ArrayList selectedData = new ArrayList();
            switch (shtName)
            {
                case "macro":
                    foreach (int yr in selTransYear)// for (int i = 0; i < genPopu.Length; i++)//population.Length; i++)
                    {
                        //if (population[i].transYear == yr)
                        int i = genPopu.Length - selTransYear.Length+yr-baseYear-1;
                        selectedData.Add(genPopu[i].transYear);
                        for (int j = 1; j < shtHeader.Length; j++)
                        {
                            if (shtHeader[j].ToString() == "population") selectedData.Add(genPopu[i].population.ToString());
                            if (shtHeader[j].ToString() == "income") selectedData.Add(genPopu[i].income.ToString());
                            if (shtHeader[j].ToString() == "cpi") selectedData.Add(genPopu[i].CPI.ToString());
                            if (shtHeader[j].ToString() == "gasprice") selectedData.Add(genPopu[i].gasPrice.ToString());
                            if (shtHeader[j].ToString() == "carcafestd") selectedData.Add(genPopu[i].carCafeSTD.ToString());
                            if (shtHeader[j].ToString() == "truckcafestd") selectedData.Add(genPopu[i].truckCafeSTD.ToString());
                            if (shtHeader[j].ToString() == "totadbudget") selectedData.Add(genPopu[i].TotAdBudget.ToString());
                            if (shtHeader[j].ToString() == "dealadbudget") selectedData.Add(genPopu[i].DealAdBudget.ToString());
                            if (shtHeader[j].ToString() == "cap_pg1") selectedData.Add(genPopu[i].cap_pg1.ToString());
                            if (shtHeader[j].ToString() == "cap_pg2") selectedData.Add(genPopu[i].cap_pg2.ToString());
                            if (shtHeader[j].ToString() == "cap_pg3") selectedData.Add(genPopu[i].cap_pg3.ToString());
                            if (shtHeader[j].ToString() == "cap_pg4") selectedData.Add(genPopu[i].cap_pg4.ToString());
                            if (shtHeader[j].ToString() == "cap_pg5") selectedData.Add(genPopu[i].cap_pg5.ToString());
                        }
                        //}
                    }
                    break;
                case "vehdata":
                    foreach (int yr in selTransYear)
                    {
                        foreach (string type in fordTransTypeList)
                        {
                            for (int i = 0; i < oemnames.Length; i++) selectedkeys.Add(oemnames[i] + yr + type);
                            for (int i = 0; i < vData.Length; i++)
                            {
                                string str = vData[i].OEM.ToUpper() + " " + vData[i].modelName.ToUpper() + vData[i].transYear + vData[i].type;
                                if (selectedkeys.IndexOf(str) > -1)
                                {
                                    selectedData.Add(vData[i].OEM);
                                    selectedData.Add(vData[i].modelName);
                                    selectedData.Add(vData[i].transYear.ToString());
                                    selectedData.Add(vData[i].type);
                                    for (int j = 4; j < shtHeader.Length; j++)
                                    {
                                        if (shtHeader[j].ToString() == "price") selectedData.Add(vData[i].price.ToString());
                                        if (shtHeader[j].ToString() == "volume") selectedData.Add(vData[i].volume.ToString());
                                    }
                                }
                            }
                        }
                    }
                    break;
                case "fordconstraints":
                    foreach (int yr in selTransYear)
                    {
                        for (int i = 0; i < oemnames.Length; i++) selectedkeys.Add(oemnames[i] + yr);
                        for (int i = 0; i < fordConstraints.Length; i++)
                        {
                            string str = fordConstraints[i].OEM.ToUpper() + " " + fordConstraints[i].modelName.ToUpper() + fordConstraints[i].transYear;
                            if (selectedkeys.IndexOf(str) > -1)
                            {
                                selectedData.Add(fordConstraints[i].OEM);
                                selectedData.Add(fordConstraints[i].modelName);
                                selectedData.Add(fordConstraints[i].transYear.ToString());
                                for (int j = 3; j < shtHeader.Length; j++)
                                {
                                    if (shtHeader[j].ToString() == "prodmin") selectedData.Add(fordConstraints[i].productionMin.ToString());
                                    if (shtHeader[j].ToString() == "prodmax") selectedData.Add(fordConstraints[i].productionMax.ToString());
                                    if (shtHeader[j].ToString() == "prodgroup_id") selectedData.Add(fordConstraints[i].prodgroup_id.ToString());
                                    if (shtHeader[j].ToString() == "variablecost") selectedData.Add(fordConstraints[i].variableCost.ToString());
                                    if (shtHeader[j].ToString() == "rentalprice") selectedData.Add(fordConstraints[i].rentalPrice.ToString());
                                    if (shtHeader[j].ToString() == "fleetprice") selectedData.Add(fordConstraints[i].fleetPrice.ToString());
                                    if (shtHeader[j].ToString() == "remarketcostrental") selectedData.Add(fordConstraints[i].remarketCostRental.ToString());
                                    if (shtHeader[j].ToString() == "rentalvolmin") selectedData.Add(fordConstraints[i].rentalVMin.ToString());
                                    if (shtHeader[j].ToString() == "rentalvolmax") selectedData.Add(fordConstraints[i].rentalVMax.ToString());
                                    if (shtHeader[j].ToString() == "fleetvolmin") selectedData.Add(fordConstraints[i].fleetVMin.ToString());
                                    if (shtHeader[j].ToString() == "fleetvolmax") selectedData.Add(fordConstraints[i].fleetVMax.ToString());
                                    if (shtHeader[j].ToString() == "retailvolmax") selectedData.Add(fordConstraints[i].retailVMax.ToString());
                                    if (shtHeader[j].ToString() == "dmretail") selectedData.Add(fordConstraints[i].DMretail.ToString());
                                    if (shtHeader[j].ToString() == "dmoffrental") selectedData.Add(fordConstraints[i].DMoffrental.ToString());
                                    if (shtHeader[j].ToString() == "rentalelast") selectedData.Add(fordConstraints[i].rentalElast.ToString());
                                    if (shtHeader[j].ToString() == "rentalvol0") selectedData.Add(fordConstraints[i].rentalVol0.ToString());
                                    if (shtHeader[j].ToString() == "fleetelast") selectedData.Add(fordConstraints[i].fleetElast.ToString());
                                    if (shtHeader[j].ToString() == "fleetvol0") selectedData.Add(fordConstraints[i].fleetVol0.ToString());
                                    if (shtHeader[j].ToString() == "gasmpg") selectedData.Add(fordConstraints[i].gasMPG.ToString());
                                    if (shtHeader[j].ToString() == "fueltarget") selectedData.Add(fordConstraints[i].fuelTarget.ToString());
                                    if (shtHeader[j].ToString() == "vehtype") selectedData.Add(fordConstraints[i].vehType.ToString());
                                    if (shtHeader[j].ToString() == "gasmpg2wd") selectedData.Add(fordConstraints[i].gasMPG2WD.ToString());
                                    if (shtHeader[j].ToString() == "fueltarget2wd") selectedData.Add(fordConstraints[i].fuelTarget2WD.ToString());
                                    if (shtHeader[j].ToString() == "volpercent2wd") selectedData.Add(fordConstraints[i].volPercent2wd.ToString());

                                    if (shtHeader[j].ToString() == "varcostfleet") selectedData.Add(fordConstraints[i].varCostFleet.ToString());
                                    if (shtHeader[j].ToString() == "varcostrental") selectedData.Add(fordConstraints[i].varCostRental.ToString());
                                    if (shtHeader[j].ToString() == "varcostrisk") selectedData.Add(fordConstraints[i].varCostRentRisk.ToString());

                                    if (shtHeader[j].ToString() == "rentalriskelast") selectedData.Add(fordConstraints[i].rentalriskElast.ToString());
                                    if (shtHeader[j].ToString() == "rentalriskprice") selectedData.Add(fordConstraints[i].rentalriskPrice.ToString());
                                    if (shtHeader[j].ToString() == "rentalriskvmax") selectedData.Add(fordConstraints[i].rentalriskVMax.ToString());
                                    if (shtHeader[j].ToString() == "rentalriskvmin") selectedData.Add(fordConstraints[i].rentalriskVMin.ToString());
                                    if (shtHeader[j].ToString() == "rentalriskvol0") selectedData.Add(fordConstraints[i].rentalriskVol0.ToString());
                                }
                            }
                        }
                    }
                    break;
                case "refresh":
                    foreach (int yr in selTransYear)
                    {
                        for (int i = 0; i < oemnames.Length; i++) selectedkeys.Add(oemnames[i] + yr);
                    }
                    
                    for (int i = 0; i < refresh.Length; i++)
                    {
                        string str = refresh[i].OEM.ToUpper() + " " + refresh[i].modelName.ToUpper() + refresh[i].refreshYear;
                        if (selectedkeys.IndexOf(str) > -1)
                        {
                            selectedData.Add(refresh[i].OEM);
                            selectedData.Add(refresh[i].modelName);
                            selectedData.Add(refresh[i].refreshYear);
                            for (int j = 3; j < shtHeader.Length; j++)
                            {
                                if (shtHeader[j].ToString() == "launchyear") selectedData.Add(refresh[i].launchYear.ToString());
                                if (shtHeader[j].ToString() == "successrate") selectedData.Add(refresh[i].successRate.ToString());
                                if (shtHeader[j].ToString() == "increasedvolrate") selectedData.Add(refresh[i].incVolRate.ToString());
                            }
                        }
                    }
                    break;
                case "basedelta":
                    foreach (string type in fordTransTypeList)
                    {
                        for (int i = 0; i < oemnames.Length; i++) selectedkeys.Add(oemnames[i] + type);
                    }

                    for (int i = 0; i < baseDelta.Length; i++)
                    {
                        string str = baseDelta[i].OEM.ToUpper() + " " + baseDelta[i].modelName.ToUpper() + baseDelta[i].type;
                        if (selectedkeys.IndexOf(str) > -1)
                        {
                            selectedData.Add(baseDelta[i].OEM);
                            selectedData.Add(baseDelta[i].modelName);
                            selectedData.Add(baseDelta[i].type);
                            for (int j = 3; j < shtHeader.Length; j++)
                            {
                                
                                if (shtHeader[j].ToString() == "sgroupid") selectedData.Add(baseDelta[i].sGroupID.ToString());
                                if (shtHeader[j].ToString() == "segment") selectedData.Add(baseDelta[i].segment.ToString());
                                if (shtHeader[j].ToString() == "mgroupid") selectedData.Add(baseDelta[i].mGroupID.ToString());
                                if (shtHeader[j].ToString() == "tgroupid") selectedData.Add(baseDelta[i].tGroupID.ToString());
                                if (shtHeader[j].ToString() == "styleagedep") selectedData.Add(baseDelta[i].styleAgeDep.ToString());
                                if (shtHeader[j].ToString() == "majimpact") selectedData.Add(baseDelta[i].majImpact.ToString());
                                if (shtHeader[j].ToString() == "majstd") selectedData.Add(baseDelta[i].majStd.ToString());
                                if (shtHeader[j].ToString() == "lifetime") selectedData.Add(baseDelta[i].lifeTime.ToString());
                                if (shtHeader[j].ToString() == "scrapratio") selectedData.Add(baseDelta[i].ScrapRatio.ToString());
                                if (shtHeader[j].ToString() == "coefbrand") selectedData.Add(baseDelta[i].coefBrand.ToString());
                                if (shtHeader[j].ToString() == "coefdeal") selectedData.Add(baseDelta[i].coefDeal.ToString());
                                if (shtHeader[j].ToString() == "kbrand") selectedData.Add(baseDelta[i].kBrand.ToString());
                                if (shtHeader[j].ToString() == "kdeal") selectedData.Add(baseDelta[i].kDeal.ToString());
                                if (shtHeader[j].ToString() == "ddelta") selectedData.Add(baseDelta[i].ddelta.ToString());
                              //  if (shtHeader[j].ToString() == "beta6") selectedData.Add(baseDelta[i].beta6.ToString());
                                if (shtHeader[j].ToString() == "modelyear") selectedData.Add(baseDelta[i].modelYear.ToString());
                                if (shtHeader[j].ToString() == "delta0") selectedData.Add(baseDelta[i].delta0.ToString());
                                if (shtHeader[j].ToString() == "all_coef_factor") selectedData.Add(baseDelta[i].adjFactor.ToString());
                            }
                        }
                    }
                    
                    break;
                case "fmccdata":
                    for (int i = 0; i < oemnames.Length; i++) selectedkeys.Add(oemnames[i]);
                    for (int i = 0; i < fmcCData.Length; i++)
                    {
                        string str = fmcCData[i].OEM.ToUpper() + " " + fmcCData[i].modelName.ToUpper();
                        if (selectedkeys.IndexOf(str) > -1)
                        {
                            selectedData.Add(fmcCData[i].OEM);
                            selectedData.Add(fmcCData[i].modelName);
                            for (int j = 2; j < shtHeader.Length; j++)
                            {
                                if (shtHeader[j].ToString() == "interceptcaptive") selectedData.Add(fmcCData[i].interceptC.ToString());
                                if (shtHeader[j].ToString() == "alpha1") selectedData.Add(fmcCData[i].alpha1.ToString());
                                if (shtHeader[j].ToString() == "alpha2") selectedData.Add(fmcCData[i].alpha2.ToString());
                                if (shtHeader[j].ToString() == "interceptloyalty") selectedData.Add(fmcCData[i].interceptL.ToString());
                                if (shtHeader[j].ToString() == "alpha3") selectedData.Add(fmcCData[i].alpha3.ToString());
                                if (shtHeader[j].ToString() == "interceptl2") selectedData.Add(fmcCData[i].interceptL2.ToString());
                                if (shtHeader[j].ToString() == "alphal2") selectedData.Add(fmcCData[i].alphaL2.ToString());
                                if (shtHeader[j].ToString() == "interceptl3") selectedData.Add(fmcCData[i].interceptL3.ToString());
                                if (shtHeader[j].ToString() == "alphal3") selectedData.Add(fmcCData[i].alphaL3.ToString());
                                if (shtHeader[j].ToString() == "interceptl4") selectedData.Add(fmcCData[i].interceptL4.ToString());
                                if (shtHeader[j].ToString() == "alphal4") selectedData.Add(fmcCData[i].alphaL4.ToString());
                                if (shtHeader[j].ToString() == "interceptl5") selectedData.Add(fmcCData[i].interceptL5.ToString());
                                if (shtHeader[j].ToString() == "alphal5") selectedData.Add(fmcCData[i].alphaL5.ToString());
                                if (shtHeader[j].ToString() == "discountedrate") selectedData.Add(fmcCData[i].discountRate.ToString());
                                if (shtHeader[j].ToString() == "interestratediff") selectedData.Add(fmcCData[i].interestRateDiff.ToString());
                            }
                        }
                    }
                    break;
                case "genvehdata":
                    foreach (int yr in selTransYear)
                    {
                        int idxyr = yr - baseYear - 1; // minus baseyear
                        for (int i = 0; i < oemnames.Length; i++)
                        {
                            string[] tmp = sp.Split(oemnames[i]);
                            foreach (string type in fordTransTypeList)
                                selectedkeys.Add(tmp[0] + tmp[2] + yr + type);
                        }

                        for (int i = 0; i < selectedkeys.Count; i++)
                        {
                                int iidx = listNewVData[idxyr].idx.IndexOf(selectedkeys[i].ToString());
                                if (iidx > -1)
                                {
                                    selectedData.Add(genVehData[idxyr][iidx].OEM);
                                    selectedData.Add(genVehData[idxyr][iidx].modelName);
                                    selectedData.Add(genVehData[idxyr][iidx].transYear.ToString());
                                    selectedData.Add(genVehData[idxyr][iidx].type);
                                    for (int j = 4; j < shtHeader.Length; j++)
                                    {
                                        if (shtHeader[j].ToString() == "price") selectedData.Add(genVehData[idxyr][iidx].price.ToString());
                                        if (shtHeader[j].ToString() == "volume") selectedData.Add(genVehData[idxyr][iidx].volume.ToString());
                                        if (shtHeader[j].ToString() == "delta") selectedData.Add(genVehData[idxyr][iidx].delta.ToString());
                                        if (shtHeader[j].ToString() == "profit") selectedData.Add(genVehData[idxyr][iidx].profit.ToString());
                                    }
                                }
                        }
                    }
                    break;
                case "genfcons":
                    foreach (int yr in selTransYear)
                    {
                        for (int i = 0; i < oemnames.Length; i++) selectedkeys.Add(oemnames[i] + yr);
                    }
                        
                    for (int i = 0; i < genFCons.Length; i++)
                    {
                            string str = genFCons[i].OEM.ToUpper() + " " + genFCons[i].modelName.ToUpper() + genFCons[i].transYear;
                            if (selectedkeys.IndexOf(str) > -1)
                            {
                                selectedData.Add(genFCons[i].OEM);
                                selectedData.Add(genFCons[i].modelName);
                                selectedData.Add(genFCons[i].transYear.ToString());
                                for (int j = 3; j < shtHeader.Length; j++)
                                {															

                                    if (shtHeader[j].ToString() == "prodmin") selectedData.Add(genFCons[i].productionMin.ToString());
                                    if (shtHeader[j].ToString() == "prodmax") selectedData.Add(genFCons[i].productionMax.ToString());
                                    if (shtHeader[j].ToString() == "prodgroup_id") selectedData.Add(genFCons[i].prodgroup_id.ToString());
                                    if (shtHeader[j].ToString() == "variablecost") selectedData.Add(genFCons[i].variableCost.ToString());
                                    if (shtHeader[j].ToString() == "rentalprice") selectedData.Add(genFCons[i].rentalPrice.ToString());
                                    if (shtHeader[j].ToString() == "fleetprice") selectedData.Add(genFCons[i].fleetPrice.ToString());
                                    if (shtHeader[j].ToString() == "remarketcostrental") selectedData.Add(genFCons[i].remarketCostRental.ToString());
                                    if (shtHeader[j].ToString() == "rentalvolmin") selectedData.Add(genFCons[i].rentalVMin.ToString());
                                    if (shtHeader[j].ToString() == "rentalvolmax") selectedData.Add(genFCons[i].rentalVMax.ToString());
                                    if (shtHeader[j].ToString() == "fleetvolmin") selectedData.Add(genFCons[i].fleetVMin.ToString());
                                    if (shtHeader[j].ToString() == "fleetvolmax") selectedData.Add(genFCons[i].fleetVMax.ToString());
                                    if (shtHeader[j].ToString() == "retailvolmax") selectedData.Add(genFCons[i].retailVMax.ToString());
                                    if (shtHeader[j].ToString() == "dmretail") selectedData.Add(genFCons[i].DMretail.ToString());
                                    if (shtHeader[j].ToString() == "dmoffrental") selectedData.Add(genFCons[i].DMoffrental.ToString());
                                    if (shtHeader[j].ToString() == "rentalelast") selectedData.Add(genFCons[i].rentalElast.ToString());
                                    if (shtHeader[j].ToString() == "rentalvol0") selectedData.Add(genFCons[i].rentalVol0.ToString());
                                    if (shtHeader[j].ToString() == "fleetelast") selectedData.Add(genFCons[i].fleetElast.ToString());
                                    if (shtHeader[j].ToString() == "fleetvol0") selectedData.Add(genFCons[i].fleetVol0.ToString());
                                    if (shtHeader[j].ToString() == "gasmpg") selectedData.Add(genFCons[i].gasMPG.ToString());
                                    if (shtHeader[j].ToString() == "fueltarget") selectedData.Add(genFCons[i].fuelTarget.ToString());
                                    if (shtHeader[j].ToString() == "vehtype") selectedData.Add(genFCons[i].vehType.ToString());
                                    if (shtHeader[j].ToString() == "gasmpg2wd") selectedData.Add(genFCons[i].gasMPG2WD.ToString());
                                    if (shtHeader[j].ToString() == "fueltarget2wd") selectedData.Add(genFCons[i].fuelTarget2WD.ToString());
                                    if (shtHeader[j].ToString() == "volpercent2wd") selectedData.Add(genFCons[i].volPercent2wd.ToString());

                                    if (shtHeader[j].ToString() == "varcostfleet") selectedData.Add(genFCons[i].varCostFleet.ToString());
                                    if (shtHeader[j].ToString() == "varcostrental") selectedData.Add(genFCons[i].varCostRental.ToString());
                                    if (shtHeader[j].ToString() == "varcostrisk") selectedData.Add(genFCons[i].varCostRentRisk.ToString());

                                    if (shtHeader[j].ToString() == "rentalriskelast") selectedData.Add(genFCons[i].rentalriskElast.ToString());
                                    if (shtHeader[j].ToString() == "rentalriskprice") selectedData.Add(genFCons[i].rentalriskPrice.ToString());
                                    if (shtHeader[j].ToString() == "rentalriskvmax") selectedData.Add(genFCons[i].rentalriskVMax.ToString());
                                    if (shtHeader[j].ToString() == "rentalriskvmin") selectedData.Add(genFCons[i].rentalriskVMin.ToString());
                                    if (shtHeader[j].ToString() == "rentalriskvol0") selectedData.Add(genFCons[i].rentalriskVol0.ToString());
                                }
                        }
                    }
                    break;
                default:
                    break;
            }
            object[,] rs = null;
            if (selectedData.Count > 0 && shtHeader.Length > 0)
            {
                rs = new object[selectedData.Count / shtHeader.Length, shtHeader.Length];
                for (int i = 0; i < selectedData.Count / shtHeader.Length; i++)
                    for (int j = 0; j < shtHeader.Length; j++)
                        rs[i, j] = selectedData[i * shtHeader.Length + j];
            }
            return rs;
        }
        private static object[,] getObjDataToAdd(string shtName, object[] shtHeader, string[] oemnames,string newoem,int launchYr)    //SZ added on 8/1/2006
        {
            Regex sp = new Regex("( )");
            string[] shts = { "vehdata", "fordconstraints", "refresh", "basedelta", "fmccdata", "macro", "genvehdata", "genfcons" };
            int[] numSht = { vData.Length, fordConstraints.Length, refresh.Length, baseDelta.Length, fmcCData.Length, population.Length, genVehData.Length, genFCons.Length };
            ArrayList selectedkeys = new ArrayList();
            ArrayList selectedData = new ArrayList();
            switch (shtName)
            {
               
                case "basedelta":
                    foreach (string type in fordTransTypeList)
                    {
                        for (int i = 0; i < oemnames.Length; i++) selectedkeys.Add(oemnames[i] + type);
                    }

                    for (int i = 0; i < baseDelta.Length; i++)
                    {
                        string str = baseDelta[i].OEM.ToUpper() + " " + baseDelta[i].modelName.ToUpper() + baseDelta[i].type;
                        if (selectedkeys.IndexOf(str) > -1)
                        {
                            //selectedData.Add(baseDelta[i].OEM);
                            selectedData.Add(newoem);
                            selectedData.Add(baseDelta[i].modelName);
                            selectedData.Add(baseDelta[i].type);
                            for (int j = 3; j < shtHeader.Length; j++)
                            {

                                if (shtHeader[j].ToString() == "sgroupid") selectedData.Add(baseDelta[i].sGroupID.ToString());
                                if (shtHeader[j].ToString() == "segment") selectedData.Add(baseDelta[i].segment.ToString());
                                if (shtHeader[j].ToString() == "mgroupid") selectedData.Add(baseDelta[i].mGroupID.ToString());
                                if (shtHeader[j].ToString() == "tgroupid") selectedData.Add(baseDelta[i].tGroupID.ToString());
                                if (shtHeader[j].ToString() == "styleagedep") selectedData.Add(baseDelta[i].styleAgeDep.ToString());
                                if (shtHeader[j].ToString() == "majimpact") selectedData.Add(baseDelta[i].majImpact.ToString());
                                if (shtHeader[j].ToString() == "majstd") selectedData.Add(baseDelta[i].majStd.ToString());
                                if (shtHeader[j].ToString() == "lifetime") selectedData.Add(baseDelta[i].lifeTime.ToString());
                                if (shtHeader[j].ToString() == "scrapratio") selectedData.Add(baseDelta[i].ScrapRatio.ToString());
                                if (shtHeader[j].ToString() == "coefbrand") selectedData.Add(baseDelta[i].coefBrand.ToString());
                                if (shtHeader[j].ToString() == "coefdeal") selectedData.Add(baseDelta[i].coefDeal.ToString());
                                if (shtHeader[j].ToString() == "kbrand") selectedData.Add(baseDelta[i].kBrand.ToString());
                                if (shtHeader[j].ToString() == "kdeal") selectedData.Add(baseDelta[i].kDeal.ToString());
                                if (shtHeader[j].ToString() == "ddelta") selectedData.Add(baseDelta[i].ddelta.ToString());
                              //  if (shtHeader[j].ToString() == "beta6") selectedData.Add(baseDelta[i].beta6.ToString());
                                if (shtHeader[j].ToString() == "modelyear") selectedData.Add(baseDelta[i].modelYear.ToString());
                                if (shtHeader[j].ToString() == "delta0") selectedData.Add(baseDelta[i].delta0.ToString());
                                if (shtHeader[j].ToString() == "all_coef_factor") selectedData.Add(baseDelta[i].adjFactor.ToString());
                            }
                        }
                    }

                    break;
                
                case "genvehdata":
                    for(int yr=launchYr; yr<baseYear+timeHorizon+1;yr++)
                    {
                        int idxyr = yr - baseYear - 1; // minus baseyear
                        for (int i = 0; i < oemnames.Length; i++)
                        {
                            string[] tmp = sp.Split(oemnames[i]);
                            foreach (string type in fordTransTypeList)
                                selectedkeys.Add(tmp[0] + tmp[2] + yr + type);
                        }

                        for (int i = 0; i < selectedkeys.Count; i++)
                        {
                            int iidx = listNewVData[idxyr].idx.IndexOf(selectedkeys[i].ToString());
                            if (iidx > -1)
                            {
                               // selectedData.Add(genVehData[idxyr][iidx].OEM);
                                selectedData.Add(newoem);
                                selectedData.Add(genVehData[idxyr][iidx].modelName);
                                selectedData.Add(genVehData[idxyr][iidx].transYear.ToString());
                                selectedData.Add(genVehData[idxyr][iidx].type);
                                for (int j = 4; j < shtHeader.Length; j++)
                                {
                                    if (shtHeader[j].ToString() == "price") selectedData.Add(genVehData[idxyr][iidx].price.ToString());
                                    if (shtHeader[j].ToString() == "volume") selectedData.Add(genVehData[idxyr][iidx].volume.ToString());
                                    if (shtHeader[j].ToString() == "delta") selectedData.Add(genVehData[idxyr][iidx].delta.ToString());
                                    if (shtHeader[j].ToString() == "profit") selectedData.Add(genVehData[idxyr][iidx].profit.ToString());
                                }
                            }
                        }
                    }
                    break;
                case "genfcons":
                    for(int yr=launchYr; yr<baseYear+timeHorizon+1; yr++)
                    {
                        for (int i = 0; i < oemnames.Length; i++) selectedkeys.Add(oemnames[i] + yr);
                    }

                    for (int i = 0; i < genFCons.Length; i++)
                    {
                        string str = genFCons[i].OEM.ToUpper() + " " + genFCons[i].modelName.ToUpper() + genFCons[i].transYear;
                        if (selectedkeys.IndexOf(str) > -1)
                        {
                            //selectedData.Add(genFCons[i].OEM);
                            selectedData.Add(newoem);
                            selectedData.Add(genFCons[i].modelName);
                            selectedData.Add(genFCons[i].transYear.ToString());
                            for (int j = 3; j < shtHeader.Length; j++)
                            {

                                if (shtHeader[j].ToString() == "prodmin") selectedData.Add(genFCons[i].productionMin.ToString());
                                if (shtHeader[j].ToString() == "prodmax") selectedData.Add(genFCons[i].productionMax.ToString());
                                if (shtHeader[j].ToString() == "prodgroup_id") selectedData.Add(genFCons[i].prodgroup_id.ToString());
                                if (shtHeader[j].ToString() == "variablecost") selectedData.Add(genFCons[i].variableCost.ToString());
                                if (shtHeader[j].ToString() == "rentalprice") selectedData.Add(genFCons[i].rentalPrice.ToString());
                                if (shtHeader[j].ToString() == "fleetprice") selectedData.Add(genFCons[i].fleetPrice.ToString());
                                if (shtHeader[j].ToString() == "remarketcostrental") selectedData.Add(genFCons[i].remarketCostRental.ToString());
                                if (shtHeader[j].ToString() == "rentalvolmin") selectedData.Add(genFCons[i].rentalVMin.ToString());
                                if (shtHeader[j].ToString() == "rentalvolmax") selectedData.Add(genFCons[i].rentalVMax.ToString());
                                if (shtHeader[j].ToString() == "fleetvolmin") selectedData.Add(genFCons[i].fleetVMin.ToString());
                                if (shtHeader[j].ToString() == "fleetvolmax") selectedData.Add(genFCons[i].fleetVMax.ToString());
                                if (shtHeader[j].ToString() == "retailvolmax") selectedData.Add(genFCons[i].retailVMax.ToString());
                                if (shtHeader[j].ToString() == "dmretail") selectedData.Add(genFCons[i].DMretail.ToString());
                                if (shtHeader[j].ToString() == "dmoffrental") selectedData.Add(genFCons[i].DMoffrental.ToString());
                                if (shtHeader[j].ToString() == "rentalelast") selectedData.Add(genFCons[i].rentalElast.ToString());
                                if (shtHeader[j].ToString() == "rentalvol0") selectedData.Add(genFCons[i].rentalVol0.ToString());
                                if (shtHeader[j].ToString() == "fleetelast") selectedData.Add(genFCons[i].fleetElast.ToString());
                                if (shtHeader[j].ToString() == "fleetvol0") selectedData.Add(genFCons[i].fleetVol0.ToString());
                                if (shtHeader[j].ToString() == "gasmpg") selectedData.Add(genFCons[i].gasMPG.ToString());
                                if (shtHeader[j].ToString() == "fueltarget") selectedData.Add(genFCons[i].fuelTarget.ToString());
                                if (shtHeader[j].ToString() == "vehtype") selectedData.Add(genFCons[i].vehType.ToString());
                                if (shtHeader[j].ToString() == "gasmpg2wd") selectedData.Add(genFCons[i].gasMPG2WD.ToString());
                                if (shtHeader[j].ToString() == "fueltarget2wd") selectedData.Add(genFCons[i].fuelTarget2WD.ToString());
                                if (shtHeader[j].ToString() == "volpercent2wd") selectedData.Add(genFCons[i].volPercent2wd.ToString());

                                if (shtHeader[j].ToString() == "varcostfleet") selectedData.Add(genFCons[i].varCostFleet.ToString());
                                if (shtHeader[j].ToString() == "varcostrental") selectedData.Add(genFCons[i].varCostRental.ToString());
                                if (shtHeader[j].ToString() == "varcostrisk") selectedData.Add(genFCons[i].varCostRentRisk.ToString());

                                if (shtHeader[j].ToString() == "rentalriskelast") selectedData.Add(genFCons[i].rentalriskElast.ToString());
                                if (shtHeader[j].ToString() == "rentalriskprice") selectedData.Add(genFCons[i].rentalriskPrice.ToString());
                                if (shtHeader[j].ToString() == "rentalriskvmax") selectedData.Add(genFCons[i].rentalriskVMax.ToString());
                                if (shtHeader[j].ToString() == "rentalriskvmin") selectedData.Add(genFCons[i].rentalriskVMin.ToString());
                                if (shtHeader[j].ToString() == "rentalriskvol0") selectedData.Add(genFCons[i].rentalriskVol0.ToString());
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
            object[,] rs = null;
            if (selectedData.Count > 0 && shtHeader.Length > 0)
            {
                rs = new object[selectedData.Count / shtHeader.Length, shtHeader.Length];
                for (int i = 0; i < selectedData.Count / shtHeader.Length; i++)
                    for (int j = 0; j < shtHeader.Length; j++)
                        rs[i, j] = selectedData[i * shtHeader.Length + j];
            }
            return rs;
        }

        //export data to edit
        public static void exportEdit(string fileName, string[] oemnames, string[] vars, 
            ArrayList vdata2, ArrayList fordconstraint2, ArrayList refresh2, ArrayList basedelta2, ArrayList fmccdata2, ArrayList population2,
            ArrayList genvehdata2, ArrayList genfcons2)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(fileName))
            {
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(fileName);
                try
                {
                    File.Move(fileName, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                        DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                }
                catch
                {
                    MessageBox.Show("Please close file " + fileName + ",\r\n, then to continue.");
                    return;
                }
                File.Copy(dataDir + "\\empty.xls", fileName);
            }
            else File.Copy(dataDir + "\\empty.xls",fileName);
           
            Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbooks books = app.Workbooks;

            Microsoft.Office.Interop.Excel._Workbook book = app.Workbooks.Open(fileName, Type.Missing, false, true, Type.Missing,
                Type.Missing, true, Type.Missing, Type.Missing, true, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            Microsoft.Office.Interop.Excel.Sheets sheets = book.Worksheets;
            
            ArrayList shtNames = new ArrayList();
            Regex sp = new Regex("( )");
            if (vdata2.Count > 0)
            {
                string[] tmp = sp.Split(vdata2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                vdata3 = (Microsoft.Office.Interop.Excel.Worksheet) book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                vdata3.Name = tmp[0].ToString();
                shtNames.Add(vdata3.Name);
                
                Object[] objHeader = new object[4 + vdata2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "transYear"; objHeader[3] = "Type";
                for (int j = 0; j < vdata2.Count; j++)
                {
                    string[] tm = sp.Split(vdata2[j].ToString());
                    objHeader[4 + j] = tm[2];
                }
                
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = vdata3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToEdit(tmp[0], objHeader, oemnames);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = vdata3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            if(fordconstraint2.Count>0)
            {
                string[] tmp = sp.Split(fordconstraint2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                fordconstraint3 = (Microsoft.Office.Interop.Excel.Worksheet) book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                fordconstraint3.Name = tmp[0];
                shtNames.Add(fordconstraint3.Name);

                Object[] objHeader = new object[3 + fordconstraint2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "transYear";
                for (int j = 0; j < fordconstraint2.Count; j++)
                {
                    string[] tm = sp.Split(fordconstraint2[j].ToString());
                    objHeader[3 + j] = tm[2];
                }
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = fordconstraint3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToEdit(tmp[0], objHeader, oemnames);
                if (objR != null)
                {
                    int rowtot = objR.Length/objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = fordconstraint3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            if(refresh2.Count>0)
            {
                string[] tmp = sp.Split(refresh2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                refresh3 = (Microsoft.Office.Interop.Excel.Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                refresh3.Name = tmp[0];
                shtNames.Add(refresh3.Name);

                Object[] objHeader = new object[3 + refresh2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "RefreshYear";
                for (int j = 0; j < refresh2.Count; j++)
                {
                    string[] tm = sp.Split(refresh2[j].ToString());
                    objHeader[3 + j] = tm[2];
                }

                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = refresh3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToEdit(tmp[0], objHeader, oemnames);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = refresh3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            if(basedelta2.Count>0)
            {
                string[] tmp = sp.Split(basedelta2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                basedelta3 = (Microsoft.Office.Interop.Excel.Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                basedelta3.Name = tmp[0];
                shtNames.Add(basedelta3.Name);

                Object[] objHeader = new object[3 + basedelta2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "Type";
                for (int j = 0; j < basedelta2.Count; j++)
                {
                    string[] tm = sp.Split(basedelta2[j].ToString());
                    objHeader[3 + j] = tm[2];
                }
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = basedelta3.get_Range("A1", endRange);
                rng.Value2 = objHeader;
                
                object[,] objR = getObjDataToEdit(tmp[0], objHeader, oemnames);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = basedelta3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            if(fmccdata2.Count>0)
            {
                string[] tmp = sp.Split(fmccdata2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                fmccdata3 = (Microsoft.Office.Interop.Excel.Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                fmccdata3.Name = tmp[0];
                shtNames.Add(fmccdata3.Name);

                Object[] objHeader = new object[2 + fmccdata2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name";
                for (int j = 0; j < fmccdata2.Count; j++)
                {
                    string[] tm = sp.Split(fmccdata2[j].ToString());
                    objHeader[2 + j] = tm[2];
                }
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = fmccdata3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToEdit(tmp[0], objHeader, oemnames);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = fmccdata3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            if (population2.Count > 0)
            {
                Microsoft.Office.Interop.Excel._Worksheet
                population3 = (Microsoft.Office.Interop.Excel.Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                population3.Name = "macro";
                shtNames.Add(population3.Name);

                Object[] objHeader = new object[1 + population2.Count];
                objHeader[0] = "TransactionYear"; //objHeader[1] = "population";
                for (int j = 0; j < population2.Count; j++)
                {
                    string[] tm = sp.Split(population2[j].ToString());
                    objHeader[1 + j] = tm[2];
                }

                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = population3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToEdit(population3.Name, objHeader, oemnames);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = population3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            if (genvehdata2.Count > 0)
            {
                string[] tmp = sp.Split(genvehdata2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                genvehdata3 = (Microsoft.Office.Interop.Excel._Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                genvehdata3.Name = tmp[0];
                shtNames.Add(genvehdata3.Name);

                Object[] objHeader = new object[4 + genvehdata2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "transYear"; objHeader[3] = "Type";
                for (int j = 0; j < genvehdata2.Count; j++)
                {
                    string[] tm = sp.Split(genvehdata2[j].ToString());
                    objHeader[4 + j] = tm[2];
                }
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = genvehdata3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToEdit(tmp[0], objHeader, oemnames);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = genvehdata3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            if (genfcons2.Count > 0)
            {
                string[] tmp = sp.Split(genfcons2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                genfcons3 = (Microsoft.Office.Interop.Excel.Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                genfcons3.Name = tmp[0];
                shtNames.Add(genfcons3.Name);

                Object[] objHeader = new object[3 + genfcons2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "transYear";
                for (int j = 0; j < genfcons2.Count; j++)
                {
                    string[] tm = sp.Split(genfcons2[j].ToString());
                    objHeader[3 + j] = tm[2];
                }
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = genfcons3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToEdit(tmp[0], objHeader, oemnames);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = genfcons3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }

            foreach(Microsoft.Office.Interop.Excel._Worksheet sht in sheets)
            {
                int idx = shtNames.IndexOf(sht.Name.ToString());
                if(idx<0 && sheets.Count>1) sht.Delete(); 
            }

            foreach (Microsoft.Office.Interop.Excel.Workbook b in app.Workbooks) { b.Close(true, Type.Missing, Type.Missing); }
            app.Workbooks.Close();
            app.Quit();
        }

        //export data to excel
        public static void WriteToEXCEL(object[,] rawdata, string[] colField, int sheetNum, string shtName, string fName)
        {
            Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
            Workbooks books = app.Workbooks;
            Range rng;
            _Workbook book;
            Sheets sheets;
            _Worksheet sheet;

            if (!File.Exists(@fName))
            {
                book = books.Add(Type.Missing);
                book.SaveAs(@fName, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlNoChange, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            }            
            book = app.Workbooks.Open(@fName, Type.Missing,
                false, true, Type.Missing, Type.Missing, true, Type.Missing,
                Type.Missing, true, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);

            sheets = book.Worksheets;
            if (sheetNum > sheets.Count)
            {
                sheet = (Microsoft.Office.Interop.Excel.Worksheet)
                       book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                sheet.Name = shtName;
            }
            else
            {
                sheet = (_Worksheet)sheets.get_Item(sheetNum);
                sheet.Name = shtName;
            }
            books[1].Activate();
            sheet.Columns.ClearContents();

            object[] Headers = colField;
            string lastCol = GetRangeLetter(colField.Length) + 1;
            rng = sheet.get_Range("A1", lastCol);
            rng.Value2 = Headers;

            rng = sheet.get_Range("A2", Type.Missing);
            rng = rng.get_Resize(rawdata.Length / colField.Length, colField.Length);
            rng.Value2 = rawdata;

            books[1].RefreshAll();
            foreach (Microsoft.Office.Interop.Excel.Workbook b in app.Workbooks) { b.Save(); b.Close(true, Type.Missing, Type.Missing); }
            app.Quit();
        }
        
        //export profit analyse
        public static void exportProfit(string filename, VehicleData[][] getProfits, ArrayList[] listProfit, Decision[] sPrice)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(filename))
            {
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(filename);
                File.Move(filename, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                    DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                File.Copy(dataDir + "\\empty.xls", filename);
            }
            else File.Copy(dataDir + "\\empty.xls", filename);

            string[] strHeader = new string[21];

            strHeader[0] = "OEM"; strHeader[1] = "modelName"; strHeader[2] = "type"; strHeader[3] = "transactionYear";
            strHeader[4] = "Volume";
            strHeader[5] = "OrigVolume"; strHeader[6] = "deltaVolume"; strHeader[7] = "deltaVolume%";
            strHeader[8] = "price"; strHeader[9] = "OrigPrice"; strHeader[10] = "deltaPrice"; strHeader[11] = "deltaPrice%";
            //strHeader[12] = "Adspending-Brand"; strHeader[13] = "OriAdspending-Brand"; strHeader[14] = "deltaAdspending-Brand"; strHeader[15] = "deltaAdspending-Brand%";
            //strHeader[16] = "Adspending-Deal"; strHeader[17] = "OriAdspending-Deal"; strHeader[18] = "deltaAdspending-Deal"; strHeader[19] = "deltaAdspending-Deal%";
            strHeader[12] = "profit"; strHeader[13] = "OrigProfit"; strHeader[14] = "deltaProfit";
            //strHeader[23] = "AdBrandRatio"; strHeader[24] = "AdDealRatio"; strHeader[25] = "OriAdBrandRatio"; strHeader[26] = "OriAdDealRatio";
            strHeader[15] = "margin"; strHeader[16] = "PriceElasticity";
            //strHeader[30] = "AdBrandElasticity"; strHeader[31] = "AdDealElasticity"; 
            strHeader[17] = "OriPriceEla";

            strHeader[18] = "gasMPG"; strHeader[19] = "Vol/gasMPG"; strHeader[20] = "VehType";
            //strHeader[36] = "AdBProfitEla"; strHeader[37] = "AdDProfitEla";

            int totrow = 0;
            for (int i = 0; i < getProfits.Length; i++) totrow += getProfits[i].Length;

            object[,] objR = new object[totrow, strHeader.Length];
            int currrow = 0;
            for (int i = 0; i < getProfits.Length; i++)
            {
                for (int j = 0; j < getProfits[i].Length; j++)
                {
                    currrow = i * getProfits[i].Length + j;
                    string oem = getProfits[i][j].OEM;
                    string modname = getProfits[i][j].modelName;
                    string type = getProfits[i][j].type;
                    int transyear = getProfits[i][j].transYear;
                    string key = oem + modname + Routines.baseYear + type;
                    int idx = Routines.listVData.IndexOf(key);

                    double oriVol = 0.0;
                    double oriPrice = 0.0;
                    double oriBradspd = 0.0;
                    double oriDealspd = 0.0;
                    double lev = 0.0;
                    double residual = 0.0;
                    double returnrate = 1.0;
                    double cost = 0.0;
                    double varcost = 0.0;
                    double price = 0.0;
                    double oriProf = 0.0;
                    double usedVol = 0.0;
                    double volume = 0.0;

                    if (idx != -1)
                    {
                        oriVol = Routines.vData[idx].volume;
                        oriPrice = Routines.vData[idx].price;
                        oriBradspd = Routines.vData[idx].AdBrandSp;
                        oriDealspd = Routines.vData[idx].AdRetailSp;
                    }
                    switch (type)
                    {
                        case "retail":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].variableCost;
                                price = getProfits[i][j].price;
                                volume = getProfits[i][j].volume;
                                varcost = cost;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "rental":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].varCostRental;
                                string keyProf = oem + modname + "offrental";
                                int idxprof = listProfit[i].IndexOf(keyProf);
                                residual = getProfits[i][idxprof].price - Routines.genFCons[idxcon].DMoffrental - Routines.genFCons[idxcon].remarketCostRental;


                                if (transyear > Routines.baseYear+1)    //Routines.beginYear
                                {
                                    int idxused = listProfit[i - 1].IndexOf(oem + modname + "rental");
                                    usedVol = getProfits[i - 1][idxused].volume;
                                }
                                else
                                {
                                    int idxused = Routines.listVData.IndexOf(oem + modname + (transyear - 1) + "rental");
                                    if (idxused > -1)           //DF added on 12/13/2006
                                        usedVol = Routines.vData[idxused].volume;
                                }
                                price = getProfits[i][j].price;
                                volume = getProfits[i][j].volume;
                                varcost = cost;

                                //    residual *= Routines.omiga;
                                oriProf = oriVol * (oriPrice - cost);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].rentalElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].rentalElast / Routines.genFCons[idxcon].rentalPrice * Routines.genFCons[idxcon].rentalVol0;
                                break;
                            }
                        case "rentalrisk":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].varCostRentRisk;

                                double priceoffbase = 0.0;

                                string keyProf = oem + modname + "offrental";
                                int idxprof = listProfit[i].IndexOf(keyProf);
                                double priceOff = getProfits[i][idxprof].price;
                                if (transyear > Routines.baseYear+1)         //Routines.beginYear
                                {
                                    string keyv = oem + modname + "offrental";
                                    int idxvd = listProfit[i].IndexOf(keyv);
                                    priceoffbase = getProfits[i][idxvd].price;
                                }
                                else
                                {
                                    string keyv = oem + modname + (transyear - 1) + "offrental";
                                    int idxvd = Routines.listVData.IndexOf(keyv);
                                    if (idxvd > -1)          //DF added on 12/13/2006
                                        priceoffbase = Routines.vData[idxvd].price;
                                }
                                price = getProfits[i][j].price;
                                volume = getProfits[i][j].volume;
                                priceoffbase = priceOff;        //DF added on 12/13/2006
                                varcost = cost - (priceOff - priceoffbase);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].rentalriskElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].rentalriskElast / Routines.genFCons[idxcon].rentalriskPrice * Routines.genFCons[idxcon].rentalriskVol0;

                                // oriPrice = getProfits[i][j].price;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "fleet":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                price = getProfits[i][j].price;
                                cost = Routines.genFCons[idxcon].varCostFleet;
                                varcost = cost;
                                oriProf = oriVol * (oriPrice - cost);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].fleetElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].fleetElast / Routines.genFCons[idxcon].fleetPrice * Routines.genFCons[idxcon].fleetVol0;
                                break;
                            }
                        case "offrental":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].DMoffrental + Routines.genFCons[idxcon].remarketCostRental;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "AdspendingBrand":
                            {
                                string key1 = oem + modname + Routines.baseYear + "retail";
                                int idx1 = Routines.listVData.IndexOf(key1);
                                double vol1 = 0.0;
                                double dealspd1 = 0.0;

                                if (idx1 != -1)
                                {
                                    oriPrice = Routines.vData[idx1].price;
                                    oriBradspd = Routines.vData[idx1].AdBrandSp;
                                    vol1 = Routines.vData[idx1].volume;
                                    dealspd1 = Routines.vData[idx1].AdRetailSp;
                                }
                                oriVol = vol1;
                                oriDealspd = dealspd1;
                                oriProf = -oriBradspd;

                                string keyoptR = oem + modname + "retail";
                                int idxopt1 = listProfit[i].IndexOf(keyoptR);
                                getProfits[i][j].ElaBrand = 0.0;
                                if (idxopt1 != -1)
                                    getProfits[i][j].ElaBrand += getProfits[i][idxopt1].volume * getProfits[i][idxopt1].price * getProfits[i][idxopt1].ElaBrand;
                                //  getProfits[i][j].ElaBrand /= 1.0E6;
                                break;
                            }
                        case "AdspendingRetail":
                            {
                                string key1 = oem + modname + Routines.baseYear + "retail";
                                int idx1 = Routines.listVData.IndexOf(key1);
                                double vol1 = 0.0;
                                double dealspd1 = 0.0;

                                if (idx1 != -1)
                                {
                                    oriPrice = Routines.vData[idx1].price;
                                    oriBradspd = Routines.vData[idx1].AdBrandSp;
                                    vol1 = Routines.vData[idx1].volume;
                                    dealspd1 = Routines.vData[idx1].AdRetailSp;
                                }
                                oriVol = vol1;
                                oriDealspd = dealspd1;
                                oriProf = -oriDealspd;

                                break;
                            }
                        default:
                            break;
                    }
                    /////////
                    //  string format = "0.00%";
                    objR[currrow, 0] = getProfits[i][j].OEM;
                    objR[currrow, 1] = getProfits[i][j].modelName;
                    objR[currrow, 2] = getProfits[i][j].type;
                    objR[currrow, 3] = getProfits[i][j].transYear;
                    objR[currrow, 4] = getProfits[i][j].volume;
                    objR[currrow, 5] = oriVol;
                    objR[currrow, 6] = (getProfits[i][j].volume - oriVol);
                    objR[currrow, 7] = Convert.ToString(getProfits[i][j].volume / oriVol - 1.0);//.ToString(format); 
                    objR[currrow, 8] = getProfits[i][j].price;
                    objR[currrow, 9] = oriPrice;
                    objR[currrow, 10] = (getProfits[i][j].price - oriPrice);
                    objR[currrow, 11] = getProfits[i][j].price / oriPrice - 1;
                    /*
                    objR[currrow, 12] = getProfits[i][j].AdBrandSp;
                    objR[currrow, 13] = oriBradspd;
                    objR[currrow, 14] = (getProfits[i][j].AdBrandSp - oriBradspd);
                    if (Math.Abs(oriBradspd) > 1.0e-6)
                        objR[currrow, 15] = getProfits[i][j].AdBrandSp / (oriBradspd) - 1;

                    objR[currrow, 16] = getProfits[i][j].AdRetailSp;
                    objR[currrow, 17] = oriDealspd;
                    objR[currrow, 18] = (getProfits[i][j].AdRetailSp - oriDealspd);
                    if (Math.Abs(oriDealspd) > 1.0e-6)
                        objR[currrow, 19] = getProfits[i][j].AdRetailSp / (oriDealspd) - 1;
                    */
                    objR[currrow, 12] = getProfits[i][j].profit * Math.Pow(Routines.omiga, i);
                    objR[currrow, 13] = oriProf;
                    objR[currrow, 14] = (getProfits[i][j].profit - oriProf);

                    /*
                    objR[currrow, 23] = getProfits[i][j].AdBrandSp / getProfits[i][j].volume / getProfits[i][j].price;
                    objR[currrow, 24] = getProfits[i][j].AdRetailSp / getProfits[i][j].volume / getProfits[i][j].price;
                    if (Math.Abs(oriBradspd) > 0)
                        objR[currrow, 25] = oriBradspd / oriVol / oriPrice;
                    if (Math.Abs(oriDealspd) > 0)
                        objR[currrow, 26] = oriDealspd / oriVol / oriPrice;
                    */
                    //objR[currrow, 27] = (price * volume + usedVol * residual * returnrate );
                    //objR[currrow, 28] = ((price - varcost) * volume + usedVol * residual * returnrate );
                    //objR[currrow, 15] = price  +  residual * returnrate;
                    objR[currrow, 15] = price - varcost  +  residual * returnrate ;

                    if (getProfits[i][j].Elasticity != 0.0)
                        objR[currrow, 16] = 1 / getProfits[i][j].Elasticity;


                    //objR[currrow, 30] = getProfits[i][j].ElaBrand;
                    //objR[currrow, 31] = getProfits[i][j].ElaDeal;
                    int idxOriPe = Routines.listBDelta.IndexOf(oem + modname + type);
                    if (idxOriPe != -1)
                    {
                        objR[currrow, 17] = 1 / Routines.baseDelta[idxOriPe].PriceEla;
                        //objR[currrow, 33] = Routines.baseDelta[idxOriPe].AdBrandEla;
                        //objR[currrow, 34] = Routines.baseDelta[idxOriPe].AdDealEla;
                    }
                    else
                    {
                        objR[currrow, 17] = 1 / getProfits[i][j].OriPriceEla;

                    }

                    //add vehMPG
                    int cid = Routines.listNewFCons.IndexOf(getProfits[i][j].OEM + getProfits[i][j].modelName + getProfits[i][j].transYear);
                    objR[currrow, 18] = Routines.genFCons[cid].gasMPG;
                    objR[currrow, 19] = getProfits[i][j].volume / (Routines.genFCons[cid].gasMPG);
                    objR[currrow, 20] = Routines.genFCons[cid].vehType;

                    //objR[currrow, 36] = getProfits[i][j].AdBProfitEla;
                    //objR[currrow, 37] = getProfits[i][j].AdDProfitEla;

                }
            }
            WriteToEXCEL(objR, strHeader, 1, "Profit", filename);

            if (Routines.PriceToVolume == 0)
            {
                //Export shadow price
                string[] strHeader2 = new string[19];
                strHeader2[0] = "OEM"; strHeader2[1] = "modelName";
                strHeader2[2] = "transYear"; strHeader2[3] = "shadowP for retailV";
                strHeader2[4] = "shadowP for rentalV"; strHeader2[5] = "shadowP for rentalRiskV"; strHeader2[6] = "shadowP for Fleet";
                strHeader2[7] = "shadowP for adspBrand"; strHeader2[8] = "shadowP for adspRetail";
                strHeader2[9] = "shadowP for ProdConstr"; strHeader2[10] = "shadowP for CarCAFE"; strHeader2[11] = "shadowP for TruckCAFE";
                strHeader2[12] = "shadowP for Tot-AdBudget"; strHeader2[13] = "shadowP for Deal-AdBudget";
                strHeader2[14] = "shadowP for cap_pg1"; strHeader2[15] = "shadowP for cap_pg2";
                strHeader2[16] = "shadowP for cap_pg3"; strHeader2[17] = "shadowP for cap_pg4";
                strHeader2[18] = "shadowP for cap_pg5"; 
                int totrow2 = sPrice.Length;
                object[,] objR2 = new object[totrow2, strHeader2.Length];

                for (int i = 0; i < sPrice.Length; i++)
                {
                    objR2[i, 0] = sPrice[i].OEM;
                    objR2[i, 1] = sPrice[i].modelName;
                    objR2[i, 2] = sPrice[i].transYear;
                    objR2[i, 3] = sPrice[i].retailVolume;
                    objR2[i, 4] = sPrice[i].rentalVolume;
                    objR2[i, 5] = sPrice[i].rentalriskVolume;
                    objR2[i, 6] = sPrice[i].fleetVolume;
                    objR2[i, 7] = sPrice[i].adspBrand;
                    objR2[i, 8] = sPrice[i].adspRetail;
                    objR2[i, 9] = sPrice[i].sPriceProd;
                    objR2[i, 10] = sPrice[i].sPriceCarCafe;
                    objR2[i, 11] = sPrice[i].sPriceTruckCafe;
                    objR2[i, 12] = sPrice[i].sPriceAdTot;
                    objR2[i, 13] = sPrice[i].sPriceAdDeal;
                    objR2[i, 14] = sPrice[i].sPriceCap_pg1;
                    objR2[i, 15] = sPrice[i].sPriceCap_pg2;
                    objR2[i, 16] = sPrice[i].sPriceCap_pg3;
                    objR2[i, 17] = sPrice[i].sPriceCap_pg4;
                    objR2[i, 18] = sPrice[i].sPriceCap_pg5;
                }
                WriteToEXCEL(objR2, strHeader2, 2, "ShadowPrice", filename);

                //Export total retail volume by segment (base_2007CY and after macro impacted)
                string[] strHeader3 = new string[15];
                strHeader3[0] = "SegmentID";
                strHeader3[1] = "Competitor BaseVol (Reg)"; strHeader3[2] = "Competitor Projected Vol (Reg)";
                strHeader3[3] = "F/L/M BaseVol (Reg)"; strHeader3[4] = "F/L/M Projected Vol (Reg)"; strHeader3[5] = "F/L/M OptimalVol (Reg)";
                strHeader3[6] = "Competitor BaseVol (HEV)"; strHeader3[7] = "Competitor Projected Vol (HEV)";
                strHeader3[8] = "F/L/M BaseVol (HEV)"; strHeader3[9] = "F/L/M Projected Vol (HEV)"; strHeader3[10] = "F/L/M OptimalVol (HEV)";
                strHeader3[11] = "Base Share (Reg)"; strHeader3[12] = "Projected Share (Reg)";
                strHeader3[13] = "Base Share (HEV)"; strHeader3[14] = "Projected Share (HEV)";

                double[] CsegVolBaseReg = new double[Routines.sGroup.Length];
                double[] CsegVolFctReg = new double[Routines.sGroup.Length];
                double[] CsegVolBaseHEV = new double[Routines.sGroup.Length];
                double[] CsegVolFctHEV = new double[Routines.sGroup.Length];
                double[] FsegVolBaseReg = new double[Routines.sGroup.Length];
                double[] FsegVolFctReg = new double[Routines.sGroup.Length];
                double[] FsegVolBaseHEV = new double[Routines.sGroup.Length];
                double[] FsegVolFctHEV = new double[Routines.sGroup.Length];
                double[] FsegVolOptReg = new double[Routines.sGroup.Length];
                double[] FsegVolOptHEV = new double[Routines.sGroup.Length];
                double[] BaseShareReg = new double[Routines.sGroup.Length];
                double[] BaseShareHEV = new double[Routines.sGroup.Length];
                double[] FctShareReg = new double[Routines.sGroup.Length];
                double[] FctShareHEV = new double[Routines.sGroup.Length];


                for (int j = 0; j < Routines.vData.Length; j++)
                {
                    if (Routines.vData[j].type.ToLower() == "retail" && Routines.vData[j].transYear == Routines.baseYear)
                    {
                        int sId = Routines.vData[j].sGroupID;
                        if (Routines.vData[j].OEM != "FORD" && Routines.vData[j].OEM != "LINCOLN" && Routines.vData[j].OEM != "MERCURY")
                        {
                            if (Routines.vData[j].Q_Hybrid.ToLower() == "yes")
                                CsegVolBaseHEV[sId] += Routines.vData[j].volume;
                            else
                                CsegVolBaseReg[sId] += Routines.vData[j].volume;
                        }
                        else
                        {
                            if (Routines.vData[j].Q_Hybrid.ToLower() == "yes")
                                FsegVolBaseHEV[sId] += Routines.vData[j].volume;
                            else
                                FsegVolBaseReg[sId] += Routines.vData[j].volume;
                        }
                    }
                }

                for (int j = 0; j < Routines.genVehData[0].Length; j++)
                {
                    if (Routines.genVehData[0][j].type.ToLower() == "retail" && Routines.genVehData[0][j].transYear == Routines.beginYear)
                    {
                        int sId = Routines.genVehData[0][j].sGroupID;
                        if (Routines.genVehData[0][j].OEM != "FORD" && Routines.genVehData[0][j].OEM != "LINCOLN" && Routines.genVehData[0][j].OEM != "MERCURY")
                        {
                            if (Routines.genVehData[0][j].Q_Hybrid.ToLower() == "yes")
                                CsegVolFctHEV[sId] += Routines.genVehData[0][j].volume;
                            else
                                CsegVolFctReg[sId] += Routines.genVehData[0][j].volume;
                        }
                        else
                        {
                            if (Routines.genVehData[0][j].Q_Hybrid.ToLower() == "yes")
                                FsegVolFctHEV[sId] += Routines.genVehData[0][j].volume;
                            else
                                FsegVolFctReg[sId] += Routines.genVehData[0][j].volume;
                        }
                    }
                }

                for (int j = 0; j < getProfits[0].Length; j++)
                {
                    if (getProfits[0][j].type.ToLower() == "retail" && getProfits[0][j].transYear == Routines.beginYear)
                    {
                        int sId = getProfits[0][j].sGroupID;
                        if (getProfits[0][j].Q_Hybrid.ToLower() == "yes")
                            FsegVolOptHEV[sId] += getProfits[0][j].volume;
                        else
                            FsegVolOptReg[sId] += getProfits[0][j].volume;
                    }
                }

                double tot_base_vol = 0.0;
                double tot_fct_vol = 0.0;
                for (int j = 0; j < Routines.sGroup.Length; j++)
                {
                    tot_base_vol += CsegVolBaseReg[j] + CsegVolBaseHEV[j] + FsegVolBaseReg[j] + FsegVolBaseHEV[j];
                    tot_fct_vol += CsegVolFctReg[j] + CsegVolFctHEV[j] + FsegVolFctReg[j] + FsegVolFctHEV[j];
                }

                for (int j = 0; j < Routines.sGroup.Length; j++)
                {
                    BaseShareReg[j] = (CsegVolBaseReg[j] + FsegVolBaseReg[j]) / tot_base_vol;
                    BaseShareHEV[j] = (CsegVolBaseHEV[j] + FsegVolBaseHEV[j]) / tot_base_vol;
                    FctShareReg[j] = (CsegVolFctReg[j] + FsegVolFctReg[j]) / tot_fct_vol;
                    FctShareHEV[j] = (CsegVolFctHEV[j] + FsegVolFctHEV[j]) / tot_fct_vol;
                }

                int totrow3 = Routines.sGroup.Length;
                object[,] objR3 = new object[totrow3, strHeader3.Length];

                for (int i = 0; i < Routines.sGroup.Length; i++)
                {
                    objR3[i, 0] = i;
                    objR3[i, 1] = CsegVolBaseReg[i];
                    objR3[i, 2] = CsegVolFctReg[i];
                    objR3[i, 3] = FsegVolBaseReg[i];
                    objR3[i, 4] = FsegVolFctReg[i];
                    objR3[i, 5] = FsegVolOptReg[i];
                    objR3[i, 6] = CsegVolBaseHEV[i];
                    objR3[i, 7] = CsegVolFctHEV[i];
                    objR3[i, 8] = FsegVolBaseHEV[i];
                    objR3[i, 9] = FsegVolFctHEV[i];
                    objR3[i, 10] = FsegVolOptHEV[i];

                    objR3[i, 11] = BaseShareReg[i];
                    objR3[i, 12] = FctShareReg[i];
                    objR3[i, 13] = BaseShareHEV[i];
                    objR3[i, 14] = FctShareHEV[i];
                }
                WriteToEXCEL(objR3, strHeader3, 3, "Segment Share&Vol Change", filename);
            }
        }

        public static void exportProfitDefault(string filename, VehicleData[][] getProfits, ArrayList[] listProfit, Decision[] sPrice)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(filename))
            {
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(filename);
                File.Move(filename, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                    DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                File.Copy(dataDir + "\\empty.xls", filename);
            }
            else File.Copy(dataDir + "\\empty.xls", filename);

            string[] strHeader = new string[38];

            strHeader[0] = "OEM"; strHeader[1] = "modelName"; strHeader[2] = "type"; strHeader[3] = "transactionYear";
            strHeader[4] = "Volume";
            strHeader[5] = "OrigVolume"; strHeader[6] = "deltaVolume"; strHeader[7] = "deltaVolume%";
            strHeader[8] = "price"; strHeader[9] = "OrigPrice"; strHeader[10] = "deltaPrice"; strHeader[11] = "deltaPrice%";
            strHeader[12] = "Adspending-Brand"; strHeader[13] = "OriAdspending-Brand"; strHeader[14] = "deltaAdspending-Brand"; strHeader[15] = "deltaAdspending-Brand%";
            strHeader[16] = "Adspending-Deal"; strHeader[17] = "OriAdspending-Deal"; strHeader[18] = "deltaAdspending-Deal"; strHeader[19] = "deltaAdspending-Deal%";
            strHeader[20] = "profit"; strHeader[21] = "OrigProfit"; strHeader[22] = "deltaProfit";
            strHeader[23] = "AdBrandRatio"; strHeader[24] = "AdDealRatio"; strHeader[25] = "OriAdBrandRatio"; strHeader[26] = "OriAdDealRatio";
            strHeader[27] = "cashflow"; strHeader[28] = "margin"; strHeader[29] = "PriceElasticity";
            strHeader[30] = "AdBrandElasticity"; strHeader[31] = "AdDealElasticity"; strHeader[32] = "OriPriceEla";

            strHeader[33] = "gasMPG"; strHeader[34] = "Vol/gasMPG"; strHeader[35] = "VehType";
            strHeader[36] = "AdBProfitEla"; strHeader[37] = "AdDProfitEla";

            // Szroutine szfun = new Szroutine();
            //  ArrayList[] listopt = szfun.getOptIndexlist(getProfits);
            //  ArrayList[] listori = szfun.getOptIndexlist(origProfits);
            int totrow = 0;
            for (int i = 0; i < getProfits.Length; i++) totrow += getProfits[i].Length;

            object[,] objR = new object[totrow, strHeader.Length];
            int currrow = 0;
            for (int i = 0; i < getProfits.Length; i++)
            {
                for (int j = 0; j < getProfits[i].Length; j++)
                {
                    currrow = i * getProfits[i].Length + j;
                    string oem = getProfits[i][j].OEM;
                    string modname = getProfits[i][j].modelName;
                    string type = getProfits[i][j].type;
                    int transyear = getProfits[i][j].transYear;
                    string key = oem + modname + Routines.baseYear + type;
                    int idx = Routines.listVData.IndexOf(key);

                    double oriVol = 0.0;
                    double oriPrice = 0.0;
                    double oriBradspd = 0.0;
                    double oriDealspd = 0.0;
                    double lev = 0.0;
                    double residual = 0.0;
                    double returnrate = 1.0;
                    double cost = 0.0;
                    double varcost = 0.0;
                    double price = 0.0;
                    double oriProf = 0.0;
                    if (idx != -1)
                    {
                        oriVol = Routines.vData[idx].volume;
                        oriPrice = Routines.vData[idx].price;
                        oriBradspd = Routines.vData[idx].AdBrandSp;
                        oriDealspd = Routines.vData[idx].AdRetailSp;
                    }
                    switch (type)
                    {
                        case "retail":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].variableCost;
                                price = getProfits[i][j].price;
                                varcost = cost;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "rental":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].varCostRental;
                                string keyProf = oem + modname + "offrental";
                                int idxprof = listProfit[i].IndexOf(keyProf);
                                residual = getProfits[i][idxprof].price - Routines.genFCons[idxcon].DMoffrental - Routines.genFCons[idxcon].remarketCostRental;
                                price = getProfits[i][j].price;
                                varcost = cost;

                                residual *= Routines.omiga;
                                //  oriPrice = getProfits[i][j].price;
                                oriProf = oriVol * (oriPrice - cost);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].rentalElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].rentalElast / Routines.genFCons[idxcon].rentalPrice * Routines.genFCons[idxcon].rentalVol0;
                                break;
                            }
                        case "rentalrisk":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].varCostRentRisk;
                                string keyProf = oem + modname + "offrental";
                                int idxprof = listProfit[i].IndexOf(keyProf);
                                double priceOff = getProfits[i][idxprof].price;
                                string keyv = oem + modname + Routines.baseYear + "offrental";
                                int idxvd = Routines.listVData.IndexOf(keyv);
                                double priceoffbase = 0.0;
                                if (idxvd > -1) priceoffbase = Routines.vData[idxvd].price;
                                price = getProfits[i][j].price;
                                priceoffbase = priceOff; //don't add premium
                                varcost = cost - (priceOff - priceoffbase);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].rentalriskElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].rentalriskElast / Routines.genFCons[idxcon].rentalriskPrice * Routines.genFCons[idxcon].rentalriskVol0;

                                // oriPrice = getProfits[i][j].price;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "fleet":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                price = getProfits[i][j].price;
                                cost = Routines.genFCons[idxcon].varCostFleet;
                                varcost = cost;
                                oriProf = oriVol * (oriPrice - cost);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].fleetElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].fleetElast / Routines.genFCons[idxcon].fleetPrice * Routines.genFCons[idxcon].fleetVol0;

                                break;
                            }

                        case "offrental":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].DMoffrental + Routines.genFCons[idxcon].remarketCostRental;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "AdspendingBrand":
                            {
                                string key1 = oem + modname + Routines.baseYear + "retail";

                                int idx1 = Routines.listVData.IndexOf(key1);
                                double vol1 = 0.0;
                                double dealspd1 = 0.0;

                                if (idx1 != -1)
                                {
                                    oriPrice = Routines.vData[idx1].price;
                                    oriBradspd = Routines.vData[idx1].AdBrandSp;
                                    vol1 = Routines.vData[idx1].volume;
                                    dealspd1 = Routines.vData[idx1].AdRetailSp;
                                }
                                oriVol = vol1 ;
                                oriDealspd = dealspd1 ;
                                oriProf = -oriBradspd;

                                string keyoptR = oem + modname + "retail";
                                int idxopt1 = listProfit[i].IndexOf(keyoptR);
                                getProfits[i][j].ElaBrand = 0.0;
                                if (idxopt1 != -1)
                                    getProfits[i][j].ElaBrand += getProfits[i][idxopt1].volume * getProfits[i][idxopt1].price * getProfits[i][idxopt1].ElaBrand;
                                //getProfits[i][j].ElaBrand /= 1.0E3;
                                break;
                            }
                        case "AdspendingRetail":
                            {
                                string key1 = oem + modname + Routines.baseYear + "retail";
                                int idx1 = Routines.listVData.IndexOf(key1);
                                double vol1 = 0.0;
                                double dealspd1 = 0.0;

                                if (idx1 != -1)
                                {
                                    oriPrice = Routines.vData[idx1].price;
                                    oriBradspd = Routines.vData[idx1].AdBrandSp;
                                    vol1 = Routines.vData[idx1].volume;
                                    dealspd1 = Routines.vData[idx1].AdRetailSp;
                                }
                                oriVol = vol1;
                                oriDealspd = dealspd1;
                                oriProf = -oriDealspd ;

                                break;
                            }
                        default:
                            break;
                    }
                    /////////
                    objR[currrow, 0] = getProfits[i][j].OEM;
                    objR[currrow, 1] = getProfits[i][j].modelName;
                    objR[currrow, 2] = getProfits[i][j].type;
                    objR[currrow, 3] = getProfits[i][j].transYear;

                    objR[currrow, 4] = getProfits[i][j].volume ;
                    objR[currrow, 5] = oriVol;
                    objR[currrow, 6] = (getProfits[i][j].volume - oriVol);
                    objR[currrow, 7] = getProfits[i][j].volume / oriVol - 1;

                    objR[currrow, 8] = getProfits[i][j].price;
                    objR[currrow, 9] = oriPrice;
                    objR[currrow, 10] = (getProfits[i][j].price - oriPrice);
                    objR[currrow, 11] = getProfits[i][j].price / oriPrice - 1;

                    objR[currrow, 12] = getProfits[i][j].AdBrandSp;
                    objR[currrow, 13] = oriBradspd;
                    objR[currrow, 14] = (getProfits[i][j].AdBrandSp - oriBradspd);
                    if (Math.Abs(oriBradspd) > 1.0e-6)
                        objR[currrow, 15] = getProfits[i][j].AdBrandSp / (oriBradspd) - 1;

                    objR[currrow, 16] = getProfits[i][j].AdRetailSp;
                    objR[currrow, 17] = oriDealspd;
                    objR[currrow, 18] = (getProfits[i][j].AdRetailSp - oriDealspd );
                    if (Math.Abs(oriDealspd) > 1.0e-6)
                        objR[currrow, 19] = getProfits[i][j].AdRetailSp / (oriDealspd ) - 1;
                    objR[currrow, 20] = getProfits[i][j].profit;
                    objR[currrow, 21] = oriProf;
                    objR[currrow, 22] = (getProfits[i][j].profit - oriProf);
                    objR[currrow, 23] = getProfits[i][j].AdBrandSp / getProfits[i][j].volume / getProfits[i][j].price;
                    objR[currrow, 24] = getProfits[i][j].AdRetailSp / getProfits[i][j].volume / getProfits[i][j].price;
                    objR[currrow, 25] = oriBradspd / oriVol / oriPrice;
                    objR[currrow, 26] = oriDealspd / oriVol / oriPrice;
                    objR[currrow, 27] = price + residual * returnrate + (1 - returnrate) * lev;
                    objR[currrow, 28] = price + residual * returnrate + (1 - returnrate) * lev - varcost;
                    if (getProfits[i][j].Elasticity != 0.0)
                        objR[currrow, 29] = 1 / getProfits[i][j].Elasticity;
                    objR[currrow, 30] = getProfits[i][j].ElaBrand;
                    objR[currrow, 31] = getProfits[i][j].ElaDeal;

                    int idxOriPe = Routines.listBDelta.IndexOf(oem + modname + type);
                    if (idxOriPe != -1)
                    {
                        objR[currrow, 32] = 1 / Routines.baseDelta[idxOriPe].PriceEla;
                        //objR[currrow, 33] = Routines.baseDelta[idxOriPe].AdBrandEla;
                        //objR[currrow, 34] = Routines.baseDelta[idxOriPe].AdDealEla;
                    }
                    else
                    {
                        objR[currrow, 32] = 1 / getProfits[i][j].OriPriceEla;
                    }

                    //add vehMPG
                    int cid = Routines.listNewFCons.IndexOf(getProfits[i][j].OEM + getProfits[i][j].modelName + getProfits[i][j].transYear);
                    objR[currrow, 33] = Routines.genFCons[cid].gasMPG;
                    objR[currrow, 34] = getProfits[i][j].volume / (Routines.genFCons[cid].gasMPG);
                    objR[currrow, 35] = Routines.genFCons[cid].vehType;

                    objR[currrow, 36] = getProfits[i][j].AdBProfitEla;
                    objR[currrow, 37] = getProfits[i][j].AdDProfitEla;

                }
             
            }
            WriteToEXCEL(objR, strHeader, 1, "Profit", filename);

 

            //Export shadow price
            /*
            string[] strHeader2 = new string[14];
            strHeader2[0] = "OEM"; strHeader2[1] = "modelName";
            strHeader2[2] = "transYear"; strHeader2[3] = "shadowP for retailV";
            strHeader2[4] = "shadowP for rentalV"; strHeader2[5] = "shadowP for rentalRiskV"; strHeader2[6] = "shadowP for Fleet";
            strHeader2[7] = "shadowP for adspBrand"; strHeader2[8] = "shadowP for adspRetail";
            strHeader2[9] = "shadowP for ProdConstr"; strHeader2[10] = "shadowP for CarCAFE"; strHeader2[11] = "shadowP for TruckCAFE";
            strHeader2[12] = "shadowP for Tot-AdBudget"; strHeader2[13] = "shadowP for Deal-AdBudget";

            int totrow2 = sPrice.Length;
            object[,] objR2 = new object[totrow2, strHeader2.Length];

            for (int i = 0; i < sPrice.Length; i++)
            {
                objR2[i, 0] = sPrice[i].OEM;
                objR2[i, 1] = sPrice[i].modelName;
                objR2[i, 2] = sPrice[i].transYear;
                objR2[i, 3] = sPrice[i].retailVolume;
                objR2[i, 4] = sPrice[i].rentalVolume;
                objR2[i, 5] = sPrice[i].rentalriskVolume;
                objR2[i, 6] = sPrice[i].fleetVolume;
                objR2[i, 7] = sPrice[i].adspBrand;
                objR2[i, 8] = sPrice[i].adspRetail;
                objR2[i, 9] = sPrice[i].sPriceProd;
                objR2[i, 10] = sPrice[i].sPriceCarCafe;
                objR2[i, 11] = sPrice[i].sPriceTruckCafe;
                objR2[i, 12] = sPrice[i].sPriceAdTot;
                objR2[i, 13] = sPrice[i].sPriceAdDeal;
            }

            WriteToEXCEL(objR2, strHeader2, 2, "ShadowPrice", filename);
            */
        }
        public static void exportProfitNew(string filename, VehicleData[][] getProfits, ArrayList[] listProfit, Decision[] sPrice)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(filename))
            {
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(filename);
                File.Move(filename, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                    DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                File.Copy(dataDir + "\\empty.xls", filename);
            }
            else File.Copy(dataDir + "\\empty.xls", filename);

            string[] strHeader = new string[38];

            strHeader[0] = "OEM"; strHeader[1] = "modelName"; strHeader[2] = "type"; strHeader[3] = "transactionYear";
            strHeader[4] = "Volume";
            strHeader[5] = "OrigVolume"; strHeader[6] = "deltaVolume"; strHeader[7] = "deltaVolume%";
            strHeader[8] = "price"; strHeader[9] = "OrigPrice"; strHeader[10] = "deltaPrice"; strHeader[11] = "deltaPrice%";
            strHeader[12] = "Adspending-Brand"; strHeader[13] = "OriAdspending-Brand"; strHeader[14] = "deltaAdspending-Brand"; strHeader[15] = "deltaAdspending-Brand%";
            strHeader[16] = "Adspending-Deal"; strHeader[17] = "OriAdspending-Deal"; strHeader[18] = "deltaAdspending-Deal"; strHeader[19] = "deltaAdspending-Deal%";
            strHeader[20] = "profit"; strHeader[21] = "OrigProfit"; strHeader[22] = "deltaProfit";
            strHeader[23] = "AdBrandRatio"; strHeader[24] = "AdDealRatio"; strHeader[25] = "OriAdBrandRatio"; strHeader[26] = "OriAdDealRatio";
            strHeader[27] = "cashflow"; strHeader[28] = "margin"; strHeader[29] = "PriceElasticity";
            strHeader[30] = "AdBrandElasticity"; strHeader[31] = "AdDealElasticity"; strHeader[32] = "OriPriceEla";

            strHeader[33] = "gasMPG"; strHeader[34] = "Vol/gasMPG"; strHeader[35] = "VehType";
            strHeader[36] = "AdBProfitEla"; strHeader[37] = "AdDProfitEla";

            // Szroutine szfun = new Szroutine();
            //  ArrayList[] listopt = szfun.getOptIndexlist(getProfits);
            //  ArrayList[] listori = szfun.getOptIndexlist(origProfits);
            int totrow = 0;
            for (int i = 0; i < getProfits.Length; i++) totrow += getProfits[i].Length;

            object[,] objR = new object[totrow, strHeader.Length];
            int currrow = 0;
            for (int i = 0; i < getProfits.Length; i++)
            {
                for (int j = 0; j < getProfits[i].Length; j++)
                {
                    currrow = i * getProfits[i].Length + j;
                    string oem = getProfits[i][j].OEM;
                    string modname = getProfits[i][j].modelName;
                    string type = getProfits[i][j].type;
                    int transyear = getProfits[i][j].transYear;
                    string key = oem + modname + Routines.baseYear + type;
                    int idx = Routines.listVData.IndexOf(key);

                    double oriVol = 0.0;
                    double oriPrice = 0.0;
                    double oriBradspd = 0.0;
                    double oriDealspd = 0.0;
                    double lev = 0.0;
                    double residual = 0.0;
                    double returnrate = 1.0;
                    double cost = 0.0;
                    double varcost = 0.0;
                    double price = 0.0;
                    double oriProf = 0.0;
                    if (idx != -1)
                    {
                        oriVol = Routines.vData[idx].volume;
                        oriPrice = Routines.vData[idx].price;
                        oriBradspd = Routines.vData[idx].AdBrandSp;
                        oriDealspd = Routines.vData[idx].AdRetailSp;
                    }
                    switch (type)
                    {
                        case "retail":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].variableCost;
                                price = getProfits[i][j].price;
                                varcost = cost;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "rental":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].varCostRental;
                                string keyProf = oem + modname + "offrental";
                                int idxprof = listProfit[i].IndexOf(keyProf);
                                residual = getProfits[i][idxprof].price - Routines.genFCons[idxcon].DMoffrental - Routines.genFCons[idxcon].remarketCostRental;
                                price = getProfits[i][j].price;
                                varcost = cost;

                                residual *= Routines.omiga;
                                //  oriPrice = getProfits[i][j].price;
                                oriProf = oriVol * (oriPrice - cost);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].rentalElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].rentalElast / Routines.genFCons[idxcon].rentalPrice * Routines.genFCons[idxcon].rentalVol0;
                                break;
                            }
                        case "rentalrisk":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].varCostRentRisk;
                                string keyProf = oem + modname + "offrental";
                                int idxprof = listProfit[i].IndexOf(keyProf);
                                double priceOff = getProfits[i][idxprof].price;
                                string keyv = oem + modname + Routines.baseYear + "offrental";
                                int idxvd = Routines.listVData.IndexOf(keyv);
                                double priceoffbase = 0.0;
                                if (idxvd > -1) priceoffbase = Routines.vData[idxvd].price;
                                price = getProfits[i][j].price;
                                priceoffbase = priceOff; //don't add premium
                                varcost = cost - (priceOff - priceoffbase);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].rentalriskElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].rentalriskElast / Routines.genFCons[idxcon].rentalriskPrice * Routines.genFCons[idxcon].rentalriskVol0;

                                // oriPrice = getProfits[i][j].price;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "fleet":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                price = getProfits[i][j].price;
                                cost = Routines.genFCons[idxcon].varCostFleet;
                                varcost = cost;
                                oriProf = oriVol * (oriPrice - cost);
                                getProfits[i][j].Elasticity = Routines.genFCons[idxcon].fleetElast / price * getProfits[i][j].volume;
                                getProfits[i][j].OriPriceEla = Routines.genFCons[idxcon].fleetElast / Routines.genFCons[idxcon].fleetPrice * Routines.genFCons[idxcon].fleetVol0;

                                break;
                            }

                        case "offrental":
                            {
                                string keycon = oem + modname + transyear;
                                int idxcon = Routines.listNewFCons.IndexOf(keycon);
                                cost = Routines.genFCons[idxcon].DMoffrental + Routines.genFCons[idxcon].remarketCostRental;
                                oriProf = oriVol * (oriPrice - cost);
                                break;
                            }
                        case "AdspendingBrand":
                            {
                                string key1 = oem + modname + Routines.baseYear + "retail";

                                int idx1 = Routines.listVData.IndexOf(key1);
                                double vol1 = 0.0;
                                double dealspd1 = 0.0;

                                if (idx1 != -1)
                                {
                                    oriPrice = Routines.vData[idx1].price;
                                    oriBradspd = Routines.vData[idx1].AdBrandSp;
                                    vol1 = Routines.vData[idx1].volume;
                                    dealspd1 = Routines.vData[idx1].AdRetailSp;
                                }
                                oriVol = vol1;
                                oriDealspd = dealspd1;
                                oriProf = -oriBradspd;

                                string keyoptR = oem + modname + "retail";
                                int idxopt1 = listProfit[i].IndexOf(keyoptR);
                                getProfits[i][j].ElaBrand = 0.0;
                                if (idxopt1 != -1)
                                    getProfits[i][j].ElaBrand += getProfits[i][idxopt1].volume * getProfits[i][idxopt1].price * getProfits[i][idxopt1].ElaBrand;
                                //getProfits[i][j].ElaBrand /= 1.0E3;
                                break;
                            }
                        case "AdspendingRetail":
                            {
                                string key1 = oem + modname + Routines.baseYear + "retail";
                                int idx1 = Routines.listVData.IndexOf(key1);
                                double vol1 = 0.0;
                                double dealspd1 = 0.0;

                                if (idx1 != -1)
                                {
                                    oriPrice = Routines.vData[idx1].price;
                                    oriBradspd = Routines.vData[idx1].AdBrandSp;
                                    vol1 = Routines.vData[idx1].volume;
                                    dealspd1 = Routines.vData[idx1].AdRetailSp;
                                }
                                oriVol = vol1;
                                oriDealspd = dealspd1;
                                oriProf = -oriDealspd;

                                break;
                            }
                        default:
                            break;
                    }
                    /////////
                    objR[currrow, 0] = getProfits[i][j].OEM;
                    objR[currrow, 1] = getProfits[i][j].modelName;
                    objR[currrow, 2] = getProfits[i][j].type;
                    objR[currrow, 3] = getProfits[i][j].transYear;

                    objR[currrow, 4] = getProfits[i][j].volume;
                    objR[currrow, 5] = oriVol;
                    objR[currrow, 6] = (getProfits[i][j].volume - oriVol);
                    objR[currrow, 7] = getProfits[i][j].volume / oriVol - 1;

                    objR[currrow, 8] = getProfits[i][j].price;
                    objR[currrow, 9] = oriPrice;
                    objR[currrow, 10] = (getProfits[i][j].price - oriPrice);
                    objR[currrow, 11] = getProfits[i][j].price / oriPrice - 1;

                    objR[currrow, 12] = getProfits[i][j].AdBrandSp;
                    objR[currrow, 13] = oriBradspd;
                    objR[currrow, 14] = (getProfits[i][j].AdBrandSp - oriBradspd);
                    if (Math.Abs(oriBradspd) > 1.0e-6)
                        objR[currrow, 15] = getProfits[i][j].AdBrandSp / (oriBradspd) - 1;

                    objR[currrow, 16] = getProfits[i][j].AdRetailSp;
                    objR[currrow, 17] = oriDealspd;
                    objR[currrow, 18] = (getProfits[i][j].AdRetailSp - oriDealspd);
                    if (Math.Abs(oriDealspd) > 1.0e-6)
                        objR[currrow, 19] = getProfits[i][j].AdRetailSp / (oriDealspd) - 1;
                    objR[currrow, 20] = getProfits[i][j].profit;
                    objR[currrow, 21] = oriProf;
                    objR[currrow, 22] = (getProfits[i][j].profit - oriProf);
                    objR[currrow, 23] = getProfits[i][j].AdBrandSp / getProfits[i][j].volume / getProfits[i][j].price;
                    objR[currrow, 24] = getProfits[i][j].AdRetailSp / getProfits[i][j].volume / getProfits[i][j].price;
                    objR[currrow, 25] = oriBradspd / oriVol / oriPrice;
                    objR[currrow, 26] = oriDealspd / oriVol / oriPrice;
                    objR[currrow, 27] = price + residual * returnrate + (1 - returnrate) * lev;
                    objR[currrow, 28] = price + residual * returnrate + (1 - returnrate) * lev - varcost;
                    if (getProfits[i][j].Elasticity != 0.0)
                        objR[currrow, 29] = 1 / getProfits[i][j].Elasticity;
                    objR[currrow, 30] = getProfits[i][j].ElaBrand;
                    objR[currrow, 31] = getProfits[i][j].ElaDeal;

                    int idxOriPe = Routines.listBDelta.IndexOf(oem + modname + type);
                    if (idxOriPe != -1)
                    {
                        objR[currrow, 32] = 1 / Routines.baseDelta[idxOriPe].PriceEla;
                        //objR[currrow, 33] = Routines.baseDelta[idxOriPe].AdBrandEla;
                        //objR[currrow, 34] = Routines.baseDelta[idxOriPe].AdDealEla;
                    }
                    else
                    {
                        objR[currrow, 32] = 1 / getProfits[i][j].OriPriceEla;
                    }

                    //add vehMPG
                    int cid = Routines.listNewFCons.IndexOf(getProfits[i][j].OEM + getProfits[i][j].modelName + getProfits[i][j].transYear);
                    objR[currrow, 33] = Routines.genFCons[cid].gasMPG;
                    objR[currrow, 34] = getProfits[i][j].volume / (Routines.genFCons[cid].gasMPG);
                    objR[currrow, 35] = Routines.genFCons[cid].vehType;

                    objR[currrow, 36] = getProfits[i][j].AdBProfitEla;
                    objR[currrow, 37] = getProfits[i][j].AdDProfitEla;

                }
            }
            WriteToEXCEL(objR, strHeader, 1, "Profit", filename);

            //Export shadow price

            string[] strHeader2 = new string[19];
            strHeader2[0] = "OEM"; strHeader2[1] = "modelName";
            strHeader2[2] = "transYear"; strHeader2[3] = "shadowP for retailV";
            strHeader2[4] = "shadowP for rentalV"; strHeader2[5] = "shadowP for rentalRiskV"; strHeader2[6] = "shadowP for Fleet";
            strHeader2[7] = "shadowP for adspBrand"; strHeader2[8] = "shadowP for adspRetail";
            strHeader2[9] = "shadowP for ProdConstr"; strHeader2[10] = "shadowP for CarCAFE"; strHeader2[11] = "shadowP for TruckCAFE";
            strHeader2[12] = "shadowP for Tot-AdBudget"; strHeader2[13] = "shadowP for Deal-AdBudget";
            strHeader2[14] = "shadowP for cap_pg1"; strHeader2[15] = "shadowP for cap_pg2";
            strHeader2[16] = "shadowP for cap_pg3"; strHeader2[17] = "shadowP for cap_pg4";
            strHeader2[18] = "shadowP for cap_pg5"; 

            int totrow2 = sPrice.Length;
            object[,] objR2 = new object[totrow2, strHeader2.Length];

            for (int i = 0; i < sPrice.Length; i++)
            {
                objR2[i, 0] = sPrice[i].OEM;
                objR2[i, 1] = sPrice[i].modelName;
                objR2[i, 2] = sPrice[i].transYear;
                objR2[i, 3] = sPrice[i].retailVolume;
                objR2[i, 4] = sPrice[i].rentalVolume;
                objR2[i, 5] = sPrice[i].rentalriskVolume;
                objR2[i, 6] = sPrice[i].fleetVolume;
                objR2[i, 7] = sPrice[i].adspBrand;
                objR2[i, 8] = sPrice[i].adspRetail;
                objR2[i, 9] = sPrice[i].sPriceProd;
                objR2[i, 10] = sPrice[i].sPriceCarCafe;
                objR2[i, 11] = sPrice[i].sPriceTruckCafe;
                objR2[i, 12] = sPrice[i].sPriceAdTot;
                objR2[i, 13] = sPrice[i].sPriceAdDeal;
                objR2[i, 14] = sPrice[i].sPriceCap_pg1;
                objR2[i, 15] = sPrice[i].sPriceCap_pg2;
                objR2[i, 16] = sPrice[i].sPriceCap_pg3;
                objR2[i, 17] = sPrice[i].sPriceCap_pg4;
                objR2[i, 18] = sPrice[i].sPriceCap_pg5;
            }

            WriteToEXCEL(objR2, strHeader2, 2, "ShadowPrice", filename);
        }

        //import data from Excel file
        public static void importFile(string infile)
        {
            // Microsoft.Office.Interop.Excel.ApplicationClass app = new Microsoft.Office.Interop.Excel.ApplicationClass();
            Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
            string fileName = Directory.GetCurrentDirectory() + "\\" + infile;
 
            if (!File.Exists(fileName))
            {
                MessageBox.Show("The input Excel data file does not exist! Please check.", "Warning");
                return;
            }
            Workbook wb = app.Workbooks.Open(@fileName, Type.Missing,
                true, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, false, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            Sheets shts = wb.Worksheets;
            
            ArrayList segmentlist = new ArrayList();
            ArrayList oemlist     = new ArrayList();
            ArrayList fordvehlist = new ArrayList();
            ArrayList othervehlist= new ArrayList();
            ArrayList segoemname  = new ArrayList();
            
            listPOPU = new ArrayList();
            listVData = new ArrayList();
            listBDelta = new ArrayList();
            listFConstraints = new ArrayList();
            listFMCCData = new ArrayList();
            listRefresh = new ArrayList();
            listLaunch = new ArrayList();
            foreach (Worksheet sht in shts)
            {
                int nRow, nCol;
                string endRange;
                sht.Activate(); // BY JF
                // sht.Select();

                string shtName = sht.Name.ToString();
 
                nRow = 1;
                nCol = 156;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                //MessageBox.Show("endRange= " + endRange);
                Range rng = app.get_Range("A1", endRange);

                object[,] rdata = (object[,]) rng.get_Value(Missing.Value);
                
                // column headings and nCol_
                int nCol_ = 0;
                ArrayList flds = new ArrayList();
                for (int i = 0; i < nCol; i++)
                {
                    //MessageBox.Show("i= " + i.ToString());
                    string str;
                    try { 
                        str = Convert.ToString(rdata[1, i + 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nCol_ = i + 1;
                    str = str.Trim().ToLower().Replace(" ","");
                    flds.Add(str);
                }

                nRow = 65535;
                nCol = nCol_;
               // MessageBox.Show("nCol= " + nCol.ToString());
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                //MessageBox.Show("endRange= " + endRange);

                rng = app.get_Range("A2", endRange);
                rdata = (System.Object[,])rng.get_Value(Missing.Value);
            
                // nRow_
                int nRow_ = 0;
                for (int i = 1; i < nRow; i++)
                {
                    try {
                        string str = Convert.ToString(rdata[i, 1]);
                        if (str.Replace(" ","") == "") break;
                    }
                    catch { break; }
                    nRow_ = i;
                }
                // ConfigName[idx]
                int idx = Array.IndexOf(xlsSheets, shtName.ToLower());
                if ((nCol_ > 0 && nRow_ > 0) && idx > -1)
                {
                    shtNames[idx] = new string[nCol];
                    flds.CopyTo(shtNames[idx]);
                }

                switch (shtName.ToLower())
                {
                    case "macro":
                        population = new Macro[nRow_];
                        listPOPU = new ArrayList();
                        for (int i = 0; i < nRow_; i++)
                        {
                            population[i] = new Macro();
                            population[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transactionyear")]);
                            population[i].population= Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("population")]);
                            population[i].CPI = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cpi")]);
                            population[i].income = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("income")]);
                            population[i].gasPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasprice")]);
                            population[i].carCafeSTD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("carcafestd")]);
                            population[i].truckCafeSTD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("truckcafestd")]);
                            population[i].TotAdBudget = 2000000.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("totadbudget")]);
                            population[i].DealAdBudget = 0.0;  // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dealadbudget")]);
                            population[i].cap_pg1 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg1")]);
                            population[i].cap_pg2 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg2")]);
                            population[i].cap_pg3 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg3")]);
                            population[i].cap_pg4 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg4")]);
                            population[i].cap_pg5 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg5")]);
                            listPOPU.Add(population[i].transYear);
                        }
                        break;
                         
                    case "cafeadjust":
                        cafeAdjust = new cafeAdjust[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            cafeAdjust[i] = new cafeAdjust();
                            cafeAdjust[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            cafeAdjust[i].modName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            cafeAdjust[i].vehType = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("vehtype")]);
                            cafeAdjust[i].fuels = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fuels")]);
                            cafeAdjust[i].fuelTarget = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget")]);
                            cafeAdjust[i].volume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volume")]);
                        }
                        break;
                    
                    case "fordtranstypelist":
                        fordTransTypeList = new string[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            fordTransTypeList[i] = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("transactiontypelist")]).ToLower(); ;
                        }
                        break;
                    case "alltranstypelist":
                        allTransTypeList = new string[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            allTransTypeList[i] = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("transactiontypelist")]).ToLower();
                        }
                         
                        break;
                    case "sgroup":
                        sGroup = new SGroupData[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            sGroup[i] = new SGroupData();
                            sGroup[i].sgroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("sgroupid")]);
                            sGroup[i].sigma    = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("sigma_s")]);
                        }
                        break;
                    case "mgroup":
                        mGroup = new MGroupData[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            mGroup[i] = new MGroupData();
                            mGroup[i].mgroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("mgroupid")]);
                            mGroup[i].sgroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("sgroupid")]);
                            mGroup[i].alpha = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alpha_m")]);
                            mGroup[i].rho = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rho_m")]);
                            mGroup[i].coeOfGasprice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coeofgasprice")]);
                            mGroup[i].coeOfGasprice1 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coeofgasprice1")]);
                            mGroup[i].coeOfGaspriceHEV = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coeofgaspricehev")]);
                            mGroup[i].coeOfIncome = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coeofincome")]);
                            mGroup[i].ar = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("ar")]);
                            mGroup[i].arHEV = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("ar")]);
                            mGroup[i].initialGas = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("initialgas")]);
                            mGroup[i].initialGasHEV = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("initialgas")]);
                            mGroup[i].initialIncome = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("initialincome")]);
                            //mGroup[i].kOfGasprice = Convert.ToDouble(rdata[i + 1, flds.IndexOf("kofgasprice")]);
                            //mGroup[i].kOfIncome = Convert.ToDouble(rdata[i + 1, flds.IndexOf("kofincome")]);

                            mGroup[i].coeNLgas = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coenlgas")]);
                            mGroup[i].coeNLgas_HEV = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coenlgas_hev")]);
                            mGroup[i].threshold_NLgasPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("threshold_nlgasprice")]);
                            mGroup[i].threshold_NLgasPrice_HEV = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("threshold_nlgasprice_hev")]);
                            mGroup[i].coeOfGasprice_new = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coeofgasprice_new")]);
                            mGroup[i].coeOfGaspriceHEV_new = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coeofgaspricehev_new")]);
                        }
                        break;
                    case "tgroup":
                        tGroup = new TGroupData[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            tGroup[i] = new TGroupData();
                            tGroup[i].tgroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("tgroupid")]);
                            tGroup[i].theta = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("theta_t")]);
                        }
                        break;
                    case "vehdata":
                        vData = new VehicleData[nRow_];
                        listVData = new ArrayList();
                        for (int i = 0; i < nRow_; i++)
                        {
                            vData[i] = new VehicleData();
                            vData[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            vData[i].segment = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("segment")]);
                            vData[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            vData[i].modelYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("modelyear")]);
                            vData[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            vData[i].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]).ToLower();
                            vData[i].sGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("sgroupid")]);
                            vData[i].mGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("mgroupid")]);
                            vData[i].tGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("tgroupid")]);
                            vData[i].price = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("price")]) / 1000.0;
                            vData[i].volume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volume")]);
                            vData[i].AdBrandSp = 0.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("adspendbrand")]); // 
                            vData[i].AdRetailSp = 0.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("adspendretail")]) ; //

                            vData[i].MacroImpVolPer1 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("macroimpvolper1")]); // 
                            vData[i].MacroImpVolPer2 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("macroimpvolper2")]); // 

                            vData[i].Q_Hybrid = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("q_hybrid")]);
                            vData[i].mpg_gas = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("mpg_gas")]); // 
                            
                            if (vData[i].transYear > recentYear) recentYear = vData[i].transYear;
                            listVData.Add(vData[i].OEM + vData[i].modelName + vData[i].transYear + vData[i].type);
                        }
                        break;
                    case "scenario":
                        Scenario = new VehicleData[nRow_];
                        listScenario = new ArrayList();
                        for (int i = 0; i < nRow_; i++)
                        {
                            Scenario[i] = new VehicleData();
                            Scenario[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            Scenario[i].segment = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("segment")]);
                            Scenario[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            Scenario[i].modelYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("modelyear")]);
                            Scenario[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            Scenario[i].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]).ToLower();
                            Scenario[i].sGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("sgroupid")]);
                            Scenario[i].mGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("mgroupid")]);
                            Scenario[i].tGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("tgroupid")]);
                            Scenario[i].price = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("price")]) / 1000.0;
                            Scenario[i].volume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volume")]);
                            Scenario[i].AdBrandSp = 0.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("adspendbrand")]); // 
                            Scenario[i].AdRetailSp = 0.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("adspendretail")]); //
                            
                            Scenario[i].MacroImpVolPer1 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("macroimpvolper1")]); // 
                            Scenario[i].MacroImpVolPer2 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("macroimpvolper2")]); // 
                            Scenario[i].Q_Hybrid = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("q_hybrid")]);
                            Scenario[i].mpg_gas = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("mpg_gas")]); // 
                         
                            listScenario.Add(Scenario[i].OEM + Scenario[i].modelName + Scenario[i].transYear + Scenario[i].type);
                        }
                        break;
                    case "basedelta":
                        baseDelta = new BaseDelta[nRow_];
                        listBDelta = new ArrayList();
                        for (int i = 0; i < nRow_; i++)
                        {
                            baseDelta[i] = new BaseDelta();
                            baseDelta[i].OEM        = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            baseDelta[i].segment    = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("segment")]);
                            baseDelta[i].modelName  = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            baseDelta[i].modelYear  = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("modelyear")]);
                            baseDelta[i].type       = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]).ToLower();
                            baseDelta[i].sGroupID   = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("sgroupid")]);
                            baseDelta[i].mGroupID   = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("mgroupid")]);
                            baseDelta[i].tGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("tgroupid")]);
                            baseDelta[i].delta0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("delta0")]);
                            baseDelta[i].styleAgeDep= Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("styleagedep")]);
                            baseDelta[i].majImpact  = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("majimpact")]);
                            baseDelta[i].majStd     = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("majstd")]);
                            baseDelta[i].lifeTime   = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("lifetime")]);
                            baseDelta[i].ScrapRatio = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("scrapratio")]);
                            baseDelta[i].coefBrand = 0.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coefbrand")]);
                            baseDelta[i].coefDeal = 0.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coefdeal")]);
                            baseDelta[i].kBrand = 1000.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("kbrand")]);
                            baseDelta[i].kDeal = 1000.0; // Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("kdeal")]);
                            baseDelta[i].adjFactor = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("all_coef_factor")]);
                            baseDelta[i].ddelta = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("ddelta")]);
                           // baseDelta[i].beta6      = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("beta6")]);
                            ////////////////////////////////////////////////////////////////////////////////////
                            int id = segmentlist.IndexOf(baseDelta[i].segment);
                            if(id<0) segmentlist.Add(baseDelta[i].segment);
                            if (Array.IndexOf(fordBrand, baseDelta[i].OEM)>0)
                            {
                                if(fordvehlist.IndexOf(baseDelta[i].OEM+" "+baseDelta[i].modelName)<0)
                                    fordvehlist.Add(baseDelta[i].OEM+" "+baseDelta[i].modelName);
                            }
                            else
                            {
                                if (othervehlist.IndexOf(baseDelta[i].OEM+" "+baseDelta[i].modelName) < 0)
                                    othervehlist.Add(baseDelta[i].OEM+" "+baseDelta[i].modelName);
                            }
                            if (oemlist.IndexOf(baseDelta[i].OEM) < 0) oemlist.Add(baseDelta[i].OEM);
                            
                            string str = baseDelta[i].segment+" "+baseDelta[i].OEM+" "+baseDelta[i].modelName;
                            if (segoemname.IndexOf(str) < 0 && baseDelta[i].modelYear>=baseYear) segoemname.Add(str);
                            ////////////////////////////////////////////////////////////////////////////////////
                            listBDelta.Add(baseDelta[i].OEM + baseDelta[i].modelName + baseDelta[i].type);
                        }
                        break;
                    case "fordconstraints":
                        fordConstraints = new FordConstraint[nRow_];
                        listFConstraints = new ArrayList();
                        for (int i = 0; i < nRow_; i++)
                        {
                            fordConstraints[i] = new FordConstraint();
                            fordConstraints[i].OEM          = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            fordConstraints[i].modelName    = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            fordConstraints[i].transYear    = Convert.ToInt32( rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            fordConstraints[i].productionMin= Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("prodmin")]);
                            fordConstraints[i].productionMax= Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("prodmax")]);
                            fordConstraints[i].prodgroup_id = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("prodgroup_id")]);
                            fordConstraints[i].rentalPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalprice")]) / 1000.0;
                            fordConstraints[i].fleetPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetprice")]) / 1000.0;
                            fordConstraints[i].variableCost = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("variablecost")]) / 1000.0;
                            fordConstraints[i].remarketCostRental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("remarketcostrental")]) / 1000.0;
                           
                            fordConstraints[i].rentalVMin   = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolmin")]);
                            fordConstraints[i].rentalVMax   = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolmax")]);
                            fordConstraints[i].retailVMax   = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("retailvolmax")]);
                            fordConstraints[i].fleetVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolmax")]);
                            fordConstraints[i].fleetVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolmin")]);
                            fordConstraints[i].gasMPG = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasmpg")]);
                            fordConstraints[i].fuelTarget = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget")]);
                            fordConstraints[i].vehType = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("vehtype")]);
                            fordConstraints[i].DMretail = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dmretail")]) / 1000.0;
                            fordConstraints[i].DMoffrental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dmoffrental")]) / 1000.0;

                            fordConstraints[i].rentalElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalelast")]) / 1000.0;
                            fordConstraints[i].rentalVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvol0")]);
                            fordConstraints[i].fleetElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetelast")]) / 1000.0;
                            fordConstraints[i].fleetVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvol0")]);

                            fordConstraints[i].rentalriskElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskelast")]) / 1000.0;
                            fordConstraints[i].rentalriskPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskprice")]) / 1000.0;
                            fordConstraints[i].rentalriskVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvmax")]);
                            fordConstraints[i].rentalriskVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvmin")]);
                            fordConstraints[i].rentalriskVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvol0")]);
                            fordConstraints[i].varCostFleet = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostfleet")]) / 1000.0;
                            fordConstraints[i].varCostRental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostrental")]) / 1000.0;
                            fordConstraints[i].varCostRentRisk = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostrisk")]) / 1000.0;

                            fordConstraints[i].gasMPG2WD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasmpg2wd")]);
                            fordConstraints[i].fuelTarget2WD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget2wd")]);
                            fordConstraints[i].volPercent2wd = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volpercent2wd")]);

                            listFConstraints.Add(fordConstraints[i].OEM + fordConstraints[i].modelName + fordConstraints[i].transYear);
                        }
                        break;
                    case "fmccdata":
                        fmcCData = new FMCCdata[nRow_];
                        listFMCCData = new ArrayList();
                        for (int i = 0; i < nRow_; i++)
                        {
                            fmcCData[i] = new FMCCdata();
                            fmcCData[i].OEM         = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            fmcCData[i].modelName   = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            fmcCData[i].interceptC  = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptcaptive")]);
                            fmcCData[i].alpha1      = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alpha1")]);
                            fmcCData[i].alpha2      = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alpha2")]);
                            fmcCData[i].interceptL  = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptloyalty")]);
                            fmcCData[i].alpha3      = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alpha3")]);
                            fmcCData[i].interceptL2 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptl2")]);
                            fmcCData[i].alphaL2     = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alphal2")]);
                            fmcCData[i].interceptL3 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptl3")]);
                            fmcCData[i].alphaL3     = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alphal3")]);
                            fmcCData[i].interceptL4 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptl4")]);
                            fmcCData[i].alphaL4     = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alphal4")]);
                            fmcCData[i].interceptL5 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptl5")]);
                            fmcCData[i].alphaL5     = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alphal5")]);
                            fmcCData[i].discountRate= Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("discountedrate")]);
                            fmcCData[i].interestRateDiff = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interestratediff")]);
                            //if (listFMCCData.IndexOf(fmcCData[i].OEM + fmcCData[i].modelName) < 0) 
                            listFMCCData.Add(fmcCData[i].OEM + fmcCData[i].modelName);
                        }
                        break;
                    case "refresh":
                        refresh = new Refresh[nRow_];
                        listRefresh = new ArrayList();
                        listLaunch = new ArrayList();
                        for (int i = 0; i < nRow_; i++)
                        {
                            refresh[i] = new Refresh();
                            refresh[i].OEM          = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            refresh[i].modelName    = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            refresh[i].refreshYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("refreshyear")]);
                            refresh[i].launchYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("launchyear")]);
                            refresh[i].successRate = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("successrate")]);
                            refresh[i].incVolRate   = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("increasedvolrate")]);
                            listRefresh.Add(refresh[i].OEM + refresh[i].modelName + refresh[i].refreshYear);
                            listLaunch.Add(refresh[i].OEM + refresh[i].modelName + refresh[i].launchYear);
                        }
                        break;
                       
                    case "planvolume":
                        planVolume = new Volume[nRow_];
                        listPlanVol = new ArrayList();
                        for (int i = 0; i < nRow_; i++)
                        {
                            planVolume[i] = new Volume();
                            planVolume[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            planVolume[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            planVolume[i].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]);
                            planVolume[i].modelYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("modelyear")]);
                            planVolume[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            planVolume[i].vol = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volume")]);

                            listPlanVol.Add(planVolume[i].OEM + planVolume[i].modelName + planVolume[i].transYear + planVolume[i].type);
                        }
                        break;
                         
                    default:
                        break;
                }
            }
            wb.Close(false, Type.Missing, Type.Missing);
            app.Workbooks.Close();
            app.Quit();
            
            segmentList = new string[segmentlist.Count]; segmentlist.Sort(); segmentlist.CopyTo(segmentList);
            oemList     = new string[oemlist.Count];     oemlist.Sort();     oemlist.CopyTo(oemList);
            fordVehList = new string[fordvehlist.Count]; fordvehlist.Sort(); fordvehlist.CopyTo(fordVehList);
            otherVehList= new string[othervehlist.Count];othervehlist.Sort();othervehlist.CopyTo(otherVehList);
            segOemName  = new string[segoemname.Count];  segoemname.Sort();  segoemname.CopyTo(segOemName);  
        }

        //import edited data from Excel file, All arraylists are headings
        public static void loadEditedFile(string fileName)//, ArrayList headpopulation, ArrayList headvehdata, ArrayList headbasedelta,
            //ArrayList headfordconstraints, ArrayList headfmccdata, ArrayList headrefresh, ArrayList headplanvolume, 
           // ArrayList headgenvehdata, ArrayList headgenfcons)
        {
            // Microsoft.Office.Interop.Excel.ApplicationClass app = new Microsoft.Office.Interop.Excel.ApplicationClass(); JF 2/29/16
            Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
            if (!File.Exists(fileName))
            {
                MessageBox.Show("The input Excel data file does not exist! Please check.", "Warning");
                return;
            }
            Workbook wb = app.Workbooks.Open(@fileName, Type.Missing,
                true, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, false, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            Sheets shts = wb.Worksheets;

            foreach (Worksheet sht in shts)
            {
                int nRow, nCol;
                string endRange;
                sht.Activate();
                string shtName = sht.Name.ToString();
                nRow = 1;
                nCol = 156;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                Range rng = app.get_Range("A1", endRange);
                object[,] rdata = (object[,])rng.get_Value(Missing.Value);

                // column headings and nCol_
                int nCol_ = 0;
                ArrayList flds = new ArrayList();
                for (int i = 0; i < nCol; i++)
                {
                    string str;
                    try
                    {
                        str = Convert.ToString(rdata[1, i + 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nCol_ = i + 1;
                    str = str.Trim().ToLower().Replace(" ", "");
                    flds.Add(str);
                }
                // get data
                nRow = 65535;
                nCol = nCol_;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                rng = app.get_Range("A2", endRange);
                rdata = (System.Object[,])rng.get_Value(Missing.Value);

                // get nRow_
                int nRow_ = 0;
                for (int i = 1; i < nRow; i++)
                {
                    try
                    {
                        string str = Convert.ToString(rdata[i, 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nRow_ = i;
                }

                switch (shtName.ToLower())
                {
                    case "macro":
                        editpopulation = new Macro[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editpopulation[i] = new Macro();
                            editpopulation[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transactionyear")]);
                            
                            //update
                            int iidx = listPOPU.IndexOf(editpopulation[i].transYear);
                            if (iidx > -1)
                            {
                                // if (flds.IndexOf("population") > -1) population[iidx].population = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("population")]);
                                if (flds.IndexOf("population") > -1) genPopu[iidx].population = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("population")]);
                                if (flds.IndexOf("cpi") > -1) genPopu[iidx].CPI = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cpi")]);
                                if (flds.IndexOf("gasprice") > -1) genPopu[iidx].gasPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasprice")]);
                                if (flds.IndexOf("income") > -1) genPopu[iidx].income = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("income")]);
                                if (flds.IndexOf("carcafestd") > -1) genPopu[iidx].carCafeSTD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("carcafestd")]);
                                if (flds.IndexOf("truckcafestd") > -1) genPopu[iidx].truckCafeSTD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("truckcafestd")]);
                                if (flds.IndexOf("totadbudget") > -1) genPopu[iidx].TotAdBudget = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("totadbudget")]);
                                if (flds.IndexOf("dealadbudget") > -1) genPopu[iidx].DealAdBudget = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dealadbudget")]);
                                if (flds.IndexOf("cap_pg1") > -1) genPopu[iidx].cap_pg1 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg1")]);
                                if (flds.IndexOf("cap_pg2") > -1) genPopu[iidx].cap_pg2 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg2")]);
                                if (flds.IndexOf("cap_pg3") > -1) genPopu[iidx].cap_pg3 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg3")]);
                                if (flds.IndexOf("cap_pg4") > -1) genPopu[iidx].cap_pg4 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg4")]);
                                if (flds.IndexOf("cap_pg5") > -1) genPopu[iidx].cap_pg5 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("cap_pg5")]);
                            }
                        }
                        break;
                    case "vehdata":
                        editvData = new VehicleData[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editvData[i] = new VehicleData();
                            editvData[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editvData[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editvData[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            editvData[i].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]);
                            
                            //update
                            int iidx = listVData.IndexOf(editvData[i].OEM + editvData[i].modelName + editvData[i].transYear + editvData[i].type);
                            if (iidx > -1)
                            {
                                if (flds.IndexOf("price") > -1) vData[iidx].price = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("price")]);
                                if (flds.IndexOf("volume") >-1) vData[iidx].volume= Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volume")]);
                            }
                        }
                        break;
                    case "basedelta":
                        editbaseDelta = new BaseDelta[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editbaseDelta[i] = new BaseDelta();
                            editbaseDelta[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editbaseDelta[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editbaseDelta[i].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]);
                            int iidx = listBDelta.IndexOf(editbaseDelta[i].OEM + editbaseDelta[i].modelName + editbaseDelta[i].type);
                            if (iidx > -1)
                            {
                                if (flds.IndexOf("delta0") > -1)    baseDelta[iidx].delta0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("delta0")]);
                                if (flds.IndexOf("styleagedep")>-1) baseDelta[iidx].styleAgeDep = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("styleagedep")]);
                                if (flds.IndexOf("majimpact")>-1)   baseDelta[iidx].majImpact = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("majimpact")]);
                                if (flds.IndexOf("majstd")>-1)      baseDelta[iidx].majStd = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("majstd")]);
                                if (flds.IndexOf("lifetime")>-1)    baseDelta[iidx].lifeTime = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("lifetime")]);
                                if (flds.IndexOf("scrapratio")>-1)  baseDelta[iidx].ScrapRatio = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("scrapratio")]);
                                if (flds.IndexOf("coefbrand") > -1) baseDelta[iidx].coefBrand = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coefbrand")]);
                                if (flds.IndexOf("coefdeal") > -1) baseDelta[iidx].coefDeal = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coefdeal")]);
                                if (flds.IndexOf("kbrand") > -1) baseDelta[iidx].kBrand = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("kbrand")]);
                                if (flds.IndexOf("kdeal") > -1) baseDelta[iidx].kDeal = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("kdeal")]);
                                if (flds.IndexOf("all_coef_factor") > -1) baseDelta[iidx].adjFactor = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("all_coef_factor")]);
                                if (flds.IndexOf("ddelta") > -1) baseDelta[iidx].ddelta = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("ddelta")]);
                              //  if (flds.IndexOf("beta6")>-1)       baseDelta[iidx].beta6 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("beta6")]);
                            }
                        }
                        break;
                    case "fordconstraints":
                        editfordConstraints = new FordConstraint[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editfordConstraints[i] = new FordConstraint();
                            editfordConstraints[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editfordConstraints[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editfordConstraints[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            int iidx = listFConstraints.IndexOf(editfordConstraints[i].OEM + editfordConstraints[i].modelName + editfordConstraints[i].transYear);
                            if (iidx > -1)
                            {
                                if (flds.IndexOf("prodmin") > -1) fordConstraints[iidx].productionMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("prodmin")]);
                                if (flds.IndexOf("prodmax") > -1) fordConstraints[iidx].productionMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("prodmax")]);
                                if (flds.IndexOf("prodgroup_id") > -1) fordConstraints[iidx].prodgroup_id = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("prodgroup_id")]);
                                if (flds.IndexOf("rentalprice") > -1) fordConstraints[iidx].rentalPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalprice")]);
                                if (flds.IndexOf("fleetprice") > -1) fordConstraints[iidx].fleetPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetprice")]);
                                if (flds.IndexOf("variablecost") > -1) fordConstraints[iidx].variableCost = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("variablecost")]);
                                if (flds.IndexOf("remarketcostrental") > -1) fordConstraints[iidx].remarketCostRental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("remarketcostrental")]);
                                if (flds.IndexOf("rentalvolmin") > -1) fordConstraints[iidx].rentalVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolmin")]);
                                if (flds.IndexOf("rentalvolmax") > -1) fordConstraints[iidx].rentalVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolmax")]);
                                if (flds.IndexOf("fleetvolmin") > -1) fordConstraints[iidx].rentalVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolmin")]);
                                if (flds.IndexOf("fleetvolmax") > -1) fordConstraints[iidx].rentalVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolmax")]);
                                if (flds.IndexOf("retailvolmax") > -1) fordConstraints[iidx].retailVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("retailvolmax")]);

                                if (flds.IndexOf("dmretail") > -1) fordConstraints[iidx].DMretail = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dmretail")]);
                                if (flds.IndexOf("dmoffrental") > -1) fordConstraints[iidx].DMoffrental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dmoffrental")]);

                                if (flds.IndexOf("rentalelast") > -1) fordConstraints[iidx].rentalElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalelast")]);
                                if (flds.IndexOf("rentalvol0") > -1) fordConstraints[iidx].rentalVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvol0")]);
                                if (flds.IndexOf("fleetelast") > -1) fordConstraints[iidx].fleetElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetelast")]);
                                if (flds.IndexOf("fleetvol0") > -1) fordConstraints[iidx].fleetVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvol0")]);
                                if (flds.IndexOf("gasmpg") > -1) fordConstraints[iidx].gasMPG = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasmpg")]);
                                if (flds.IndexOf("fueltarget") > -1) fordConstraints[iidx].fuelTarget = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget")]);
                                if (flds.IndexOf("gasmpg2wd") > -1) fordConstraints[iidx].gasMPG2WD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasmpg2wd")]);
                                if (flds.IndexOf("fueltarget2wd") > -1) fordConstraints[iidx].fuelTarget2WD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget2wd")]);
                                if (flds.IndexOf("volpercent2wd") > -1) fordConstraints[iidx].volPercent2wd= Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volpercent2wd")]);
                                if (flds.IndexOf("vehtype") > -1) fordConstraints[iidx].vehType = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("vehtype")]);

                                if (flds.IndexOf("varcostfleet") > -1) fordConstraints[iidx].varCostFleet = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostfleet")]);
                                if (flds.IndexOf("varcostrental") > -1) fordConstraints[iidx].varCostRental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostrental")]);
                                if (flds.IndexOf("varcostrisk") > -1) fordConstraints[iidx].varCostRentRisk = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostrisk")]);
                                if (flds.IndexOf("rentalriskelast") > -1) fordConstraints[iidx].rentalriskElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskelast")]);
                                if (flds.IndexOf("rentalriskprice") > -1) fordConstraints[iidx].rentalriskPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskprice")]);
                                if (flds.IndexOf("rentalriskvmax") > -1) fordConstraints[iidx].rentalriskVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvmax")]);
                                if (flds.IndexOf("rentalriskvmin") > -1) fordConstraints[iidx].rentalriskVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvmin")]);
                                if (flds.IndexOf("rentalriskvol0") > -1) fordConstraints[iidx].rentalriskVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvol0")]);
                            }
                        }
                        break;
                    case "fmccdata":
                        editfmcCData = new FMCCdata[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editfmcCData[i] = new FMCCdata();
                            editfmcCData[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editfmcCData[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            int iidx = listFMCCData.IndexOf(editfmcCData[i].OEM + editfmcCData[i].modelName);
                            if (iidx > -1)
                            {
                                if(flds.IndexOf("interceptcaptive")>-1) fmcCData[iidx].interceptC = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptcaptive")]);
                                if(flds.IndexOf("alpha1")>-1)           fmcCData[iidx].alpha1 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alpha1")]);
                                if(flds.IndexOf("alpha2")>-1)           fmcCData[iidx].alpha2 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alpha2")]);
                                if(flds.IndexOf("interceptloyalty")>-1) fmcCData[iidx].interceptL = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptloyalty")]);
                                if(flds.IndexOf("alpha3")>-1)           fmcCData[iidx].alpha3 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alpha3")]);
                                if(flds.IndexOf("interceptl2")>-1)      fmcCData[iidx].interceptL2 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptl2")]);
                                if(flds.IndexOf("alphal2")>-1)          fmcCData[iidx].alphaL2 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alphal2")]);
                                if(flds.IndexOf("interceptl3")>-1)      fmcCData[iidx].interceptL3 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptl3")]);
                                if(flds.IndexOf("alphal3")>-1)          fmcCData[iidx].alphaL3 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alphal3")]);
                                if(flds.IndexOf("interceptl4")>-1)      fmcCData[iidx].interceptL4 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptl4")]);
                                if(flds.IndexOf("alphal4")>-1)          fmcCData[iidx].alphaL4 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alphal4")]);
                                if(flds.IndexOf("interceptl5")>-1)      fmcCData[iidx].interceptL5 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interceptl5")]);
                                if(flds.IndexOf("alphal5")>-1)          fmcCData[iidx].alphaL5 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("alphal5")]);
                                if(flds.IndexOf("discountedrate")>-1)   fmcCData[iidx].discountRate = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("discountedrate")]);
                                if(flds.IndexOf("interestratediff")>-1) fmcCData[iidx].interestRateDiff = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("interestratediff")]);
                            }
                        }
                        break;
                    case "refresh":
                        editrefresh = new Refresh[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editrefresh[i] = new Refresh();
                            editrefresh[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editrefresh[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editrefresh[i].refreshYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("refreshyear")]);
                            editrefresh[i].launchYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("launchyear")]);
                            int iidx = listRefresh.IndexOf(editrefresh[i].OEM + editrefresh[i].modelName + editrefresh[i].refreshYear);
                            if (iidx > -1)
                            {
                                if(flds.IndexOf("successrate")>-1) refresh[iidx].successRate = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("successrate")]);
                                if(flds.IndexOf("incrasedvolrate")>-1) refresh[iidx].incVolRate = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("increasedvolrate")]);
                            }
                        }
                        break;
                    case "genvehdata":
                        editgenVehData = new VehicleData[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editgenVehData[i] = new VehicleData();
                            editgenVehData[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editgenVehData[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editgenVehData[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            editgenVehData[i].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]);

                            //update
                            int ijdx = editgenVehData[i].transYear - baseYear - 1;
                            int iidx = listNewVData[ijdx].idx.IndexOf(editgenVehData[i].OEM + editgenVehData[i].modelName + editgenVehData[i].transYear + editgenVehData[i].type);
                            if (iidx > -1)
                            {
                                if (flds.IndexOf("price") > -1) genVehData[ijdx][iidx].price = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("price")]);
                                if (flds.IndexOf("volume") > -1)genVehData[ijdx][iidx].volume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volume")]);
                                if (flds.IndexOf("profit") > -1) genVehData[ijdx][iidx].profit = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("profit")]);
                            }
                        }
                        break;
                    case "genfcons":
                        editgenFCons = new FordConstraint[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editgenFCons[i] = new FordConstraint();
                            editgenFCons[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editgenFCons[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editgenFCons[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            int iidx = listNewFCons.IndexOf(editgenFCons[i].OEM + editgenFCons[i].modelName + editgenFCons[i].transYear);
                            if (iidx > -1)
                            {
                                if (flds.IndexOf("prodmin") > -1) genFCons[iidx].productionMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("prodmin")]);
                                if (flds.IndexOf("prodmax") > -1) genFCons[iidx].productionMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("prodmax")]);
                                if (flds.IndexOf("prodgroup_id") > -1) genFCons[iidx].prodgroup_id = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("prodgroup_id")]);
                                if (flds.IndexOf("rentalprice") > -1) genFCons[iidx].rentalPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalprice")]);
                                if (flds.IndexOf("fleetprice") > -1) genFCons[iidx].fleetPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetprice")]);
                                if (flds.IndexOf("variablecost") > -1) genFCons[iidx].variableCost = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("variablecost")]);
                                if (flds.IndexOf("remarketcostrental") > -1) genFCons[iidx].remarketCostRental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("remarketcostrental")]);
                                if (flds.IndexOf("rentalvolmin") > -1) genFCons[iidx].rentalVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolmin")]);
                                if (flds.IndexOf("rentalvolmax") > -1) genFCons[iidx].rentalVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolmax")]);
                                if (flds.IndexOf("fleetvolmin") > -1) genFCons[iidx].fleetVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolmin")]);
                                if (flds.IndexOf("fleetvolmax") > -1) genFCons[iidx].fleetVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolmax")]);
                                if (flds.IndexOf("retailvolmax") > -1) genFCons[iidx].retailVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("retailvolmax")]);

                                if (flds.IndexOf("dmretail") > -1) genFCons[iidx].DMretail = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dmretail")]);
                                if (flds.IndexOf("dmoffrental") > -1) genFCons[iidx].DMoffrental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dmoffrental")]);

                                if (flds.IndexOf("rentalelast") > -1) genFCons[iidx].rentalElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalelast")]);
                                if (flds.IndexOf("rentalvol0") > -1) genFCons[iidx].rentalVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvol0")]);
                                if (flds.IndexOf("fleetelast") > -1) genFCons[iidx].fleetElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetelast")]);
                                if (flds.IndexOf("fleetvol0") > -1) genFCons[iidx].fleetVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvol0")]);
                                if (flds.IndexOf("gasmpg") > -1) genFCons[iidx].gasMPG = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasmpg")]);
                                if (flds.IndexOf("fueltarget") > -1) genFCons[iidx].fuelTarget = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget")]);
                                if (flds.IndexOf("gasmpg2wd") > -1) genFCons[iidx].gasMPG2WD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasmpg2wd")]);
                                if (flds.IndexOf("fueltarget2wd") > -1) genFCons[iidx].fuelTarget2WD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget2wd")]);
                                if (flds.IndexOf("volpercent2wd") > -1) genFCons[iidx].volPercent2wd = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volpercent2wd")]);
                                if (flds.IndexOf("vehtype") > -1) genFCons[iidx].vehType = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("vehtype")]);

                                if (flds.IndexOf("varcostfleet") > -1) genFCons[iidx].varCostFleet = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostfleet")]);
                                if (flds.IndexOf("varcostrental") > -1) genFCons[iidx].varCostRental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostrental")]);
                                if (flds.IndexOf("varcostrisk") > -1) genFCons[iidx].varCostRentRisk = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostrisk")]);
                                if (flds.IndexOf("rentalriskelast") > -1) genFCons[iidx].rentalriskElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskelast")]);
                                if (flds.IndexOf("rentalriskprice") > -1) genFCons[iidx].rentalriskPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskprice")]);
                                if (flds.IndexOf("rentalriskvmax") > -1) genFCons[iidx].rentalriskVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvmax")]);
                                if (flds.IndexOf("rentalriskvmin") > -1) genFCons[iidx].rentalriskVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvmin")]);
                                if (flds.IndexOf("rentalriskvol0") > -1) genFCons[iidx].rentalriskVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvol0")]);
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
            wb.Close(false, Type.Missing, Type.Missing);
            app.Workbooks.Close();
            app.Quit();

        }
   
        private static string GetRangeLetter(int range)
        {
            string[] letterList ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
								  "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
								  "AA","AB","AC","AD","AE","AF","AG","AH","AI","AJ","AK","AL","AM",
								  "AN","AO","AP","AQ","AR","AS","AT","AU","AV","AW","AX","AY","AZ",
								  "BA","BB","BC","BD","BE","BF","BG","BH","BI","BJ","BK","BL","BM",
								  "BN","BO","BP","BQ","BR","BS","BT","BU","BV","BW","BX","BY","BZ",
								  "BA","CB","CC","CD","CE","CF","CG","CH","CI","CJ","CK","CL","CM",
								  "CN","CO","CP","CQ","CR","CS","CT","CU","CV","CW","CX","CY","CZ",
								  "DA","DB","DC","DD","DE","DF","DG","DH","DI","DJ","DK","DL","DM",
								  "DN","DO","DP","DQ","DR","DS","DT","DU","DV","DW","DX","DY","DZ",
								  "EA","EB","EC","ED","EE","EF","EG","EH","EI","EJ","EK","EL","EM",
								  "EN","EO","EP","EQ","ER","ES","ET","EU","EV","EW","EX","EY","EZ"};
            if (range < 1) return null;
            else return letterList[range - 1];
        }
        //view excel file
        public static void viewEXCEL(string filename)
        {
            string str = Directory.GetCurrentDirectory();
            if(!filename.Contains(str)) filename = Directory.GetCurrentDirectory() + "\\" + filename;
            System.Diagnostics.Process proc = new System.Diagnostics.Process();
            proc.EnableRaisingEvents = false;
            proc.StartInfo.FileName = "excel";
            proc.StartInfo.FileName = filename;
            proc.Start();
        }
        
        //export updated input data
        public static string ExportUpdInputData(string dataFile)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (dataFile.Replace(" ", "").ToString().Length == 0) dataFile = dataDir+"\\DefaultUpdInput.xls";
            if (File.Exists(dataFile) && dataFile != dataDir + "\\empty.xls")
            {
                File.Move(dataFile, dataDir + "\\Data\\DefaultUpdInput" + DateTime.Now.Day +
                    DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                File.Copy(dataDir + "\\empty.xls", dataFile);
            }
            else File.Copy(dataDir + "\\empty.xls", dataFile);

            for(int i=0; i<shtNames.Length; i++)
            {
                string shtName = xlsSheets[i];
                object[,] rdata = null;
                switch (shtName)
                {
                    case "fordconstraints":
                        rdata = new object[fordConstraints.Length,shtNames[i].Length];
                        for (int k = 0; k < fordConstraints.Length; k++)
                        {
                            rdata[k, 0] = fordConstraints[k].OEM.ToString();                                   shtNames[i][ 0] = "OEM";                    
                            rdata[k, 1] = fordConstraints[k].modelName.ToString();                             shtNames[i][ 1] = "Name";                   
                            rdata[k, 2] = fordConstraints[k].productionMin.ToString();                         shtNames[i][ 2] = "productionMin";          
                            rdata[k, 3] = fordConstraints[k].productionMax.ToString();                         shtNames[i][ 3] = "productionMax";          
                            rdata[k, 4] = fordConstraints[k].variableCost.ToString();                          shtNames[i][ 4] = "variableCost";           
                            rdata[k, 5] = fordConstraints[k].rentalPrice.ToString();                           shtNames[i][ 5] = "rentalPrice";            
                            rdata[k, 6] = fordConstraints[k].remarketCostRental.ToString();                    shtNames[i][ 6] = "remarketCostRental";     
                            rdata[k, 7] = fordConstraints[k].rentalVMin.ToString();                           shtNames[i][ 7] = "rentalVolMin";            
                            rdata[k, 8] = fordConstraints[k].retailVMax.ToString();                           shtNames[i][ 8] = "retailVolMax";            
                            rdata[k, 9] = fordConstraints[k].retailVMax.ToString();                           shtNames[i][ 9] = "retailVolMax";            
                            rdata[k, 10] = fordConstraints[k].DMretail.ToString();                             shtNames[i][ 10] = "DMretail";              
                            rdata[k, 11] = fordConstraints[k].DMoffrental.ToString();                          shtNames[i][ 11] = "DMoffrental";
                            rdata[k, 12] = fordConstraints[k].rentalElast.ToString();                           shtNames[i][12] = "rentalElast";
                            rdata[k, 13] = fordConstraints[k].rentalVol0.ToString();                            shtNames[i][13] = "rentalVol0";
                            rdata[k, 14] = fordConstraints[k].fleetElast.ToString();                            shtNames[i][14] = "fleetElast";
                            rdata[k, 15] = fordConstraints[k].fleetVol0.ToString();                             shtNames[i][15] = "fleetVol0";          
                            rdata[k, 16] = fordConstraints[k].transYear.ToString();                            shtNames[i][ 16] = "transYear";
                            rdata[k, 17] = fordConstraints[k].fleetPrice.ToString();                           shtNames[i][17] = "fleetprice";
                            rdata[k, 18] = fordConstraints[k].fleetVMax.ToString();                            shtNames[i][18] = "fleetvolmax";
                            rdata[k, 19] = fordConstraints[k].fleetVMin.ToString();                            shtNames[i][19] = "fleetvolmin";
                            rdata[k, 20] = fordConstraints[k].gasMPG.ToString();                               shtNames[i][20] = "gasmpg";
                            rdata[k, 21] = fordConstraints[k].fuelTarget.ToString();                            shtNames[i][21] = "fuelTarget";
                            rdata[k, 22] = fordConstraints[k].vehType.ToString();                               shtNames[i][22] = "vehtype";

                            rdata[k, 23] = fordConstraints[k].varCostFleet.ToString();                          shtNames[i][23] = "varCostFleet";
                            rdata[k, 24] = fordConstraints[k].varCostRental.ToString();                         shtNames[i][24] = "varCostRental";
                            rdata[k, 25] = fordConstraints[k].varCostRentRisk.ToString();                       shtNames[i][25] = "varcostrisk";
                            rdata[k, 26] = fordConstraints[k].rentalriskElast.ToString();                       shtNames[i][26] = "rentalriskElast";
                            rdata[k, 27] = fordConstraints[k].rentalriskPrice.ToString();                       shtNames[i][27] = "rentalriskPrice";
                            rdata[k, 28] = fordConstraints[k].rentalriskVMax.ToString();                        shtNames[i][28] = "rentalriskVMax";
                            rdata[k, 29] = fordConstraints[k].rentalriskVMin.ToString();                        shtNames[i][29] = "rentalriskVMin";
                            rdata[k, 30] = fordConstraints[k].rentalriskVol0.ToString();                        shtNames[i][30] = "rentalriskVol0";

                            rdata[k, 31] = fordConstraints[k].gasMPG2WD.ToString(); shtNames[i][31] = "gasmpg2wd";
                            rdata[k, 32] = fordConstraints[k].fuelTarget2WD.ToString(); shtNames[i][32] = "fuelTarget2wd";
                            rdata[k, 33] = fordConstraints[k].volPercent2wd.ToString(); shtNames[i][33] = "volPercent2wd";
                            rdata[k, 34] = fordConstraints[k].prodgroup_id.ToString(); shtNames[i][34] = "prodgroup_id";

                        }
                        break;
                    
                    case "refresh":
                        rdata = new object[refresh.Length, shtNames[i].Length];
                        for (int k = 0; k < refresh.Length; k++)
                        {
                            rdata[k, 0] = refresh[k].OEM.ToString();                                    shtNames[i][ 0] = "OEM";
                            rdata[k, 1] = refresh[k].modelName.ToString();                              shtNames[i][ 1] = "Name";
                            rdata[k, 2] = refresh[k].refreshYear.ToString();                            shtNames[i][2] = "refreshYear";
                            rdata[k, 3] = refresh[k].launchYear.ToString();                             shtNames[i][3] = "launchYear";
                            rdata[k, 4] = refresh[k].successRate.ToString();                            shtNames[i][4] = "successRate";
                            rdata[k, 5] = refresh[k].incVolRate.ToString();                             shtNames[i][5] = "IncreasedVolRate";
                        }
                        break;
                    case "mgroup":
                        rdata = new object[mGroup.Length, shtNames[i].Length];
                        for (int k = 0; k < mGroup.Length; k++)
                        {
                            rdata[k, 0] = mGroup[k].mgroupID.ToString();                                 shtNames[i][ 0] = "mgroupID";
                            rdata[k, 1] = mGroup[k].alpha.ToString();                                    shtNames[i][ 1] = "alpha_m";
                            rdata[k, 2] = mGroup[k].rho.ToString();                                      shtNames[i][ 2] = "rho_m";
                            rdata[k, 3] = mGroup[k].coeOfGasprice.ToString();                            shtNames[i][3] = "coeOfGasprice";
                            rdata[k, 4] = mGroup[k].coeOfIncome.ToString();                              shtNames[i][ 4] = "coeOfIncome";
                            rdata[k, 5] = mGroup[k].ar.ToString();                                       shtNames[i][5] = "ar";
                            rdata[k, 6] = mGroup[k].initialGas.ToString();                              shtNames[i][6] = "initialGas";
                            rdata[k, 7] = mGroup[k].initialIncome.ToString();                           shtNames[i][7] = "initialIncome";
                            rdata[k, 8] = mGroup[k].sgroupID.ToString();                                shtNames[i][8] = "sgroupID";
                            rdata[k, 5] = mGroup[k].ar.ToString();                                       shtNames[i][5] = "ar";
                            rdata[k, 9] = mGroup[k].coeOfGaspriceHEV.ToString();                    shtNames[i][9] = "coeOfGaspriceHEV";
                            rdata[k, 10] = mGroup[k].arHEV.ToString();                              shtNames[i][10] = "arHEV";
                            rdata[k, 11] = mGroup[k].initialGasHEV.ToString(); shtNames[i][11] = "initialGasHEV";
                            rdata[k, 12] = mGroup[k].coeOfGasprice1.ToString(); shtNames[i][12] = "coeOfGasprice1";

                        }
                        break;
                    case "sgroup":
                        rdata = new object[sGroup.Length, shtNames[i].Length];
                        for (int k = 0; k < sGroup.Length; k++)
                        {
                            rdata[k, 0] = sGroup[k].sgroupID.ToString();                      shtNames[i][0] = "sgroupID";
                            rdata[k, 1] = sGroup[k].sigma.ToString();                        shtNames[i][1] = "sigma_s";
                        }
                        break;

                    case "tgroup":
                        rdata = new object[tGroup.Length, shtNames[i].Length];
                        for (int k = 0; k < tGroup.Length; k++)
                        {
                            rdata[k, 0] = tGroup[k].tgroupID.ToString(); shtNames[i][0] = "tgroupID";
                            rdata[k, 1] = tGroup[k].theta.ToString(); shtNames[i][1] = "theta_t";
                        }
                        break;

                    case "alltranstypelist":
                        rdata = new object[allTransTypeList.Length,1];
                        for (int k = 0; k < allTransTypeList.Length; k++) rdata[k, 0] = allTransTypeList[k];
                        break;
                    case "fordtranstypelist":
                        rdata = new object[fordTransTypeList.Length,1];
                        for (int k = 0; k < fordTransTypeList.Length; k++) rdata[k, 0] = fordTransTypeList[k];
                        break;
                         
                    case "macro":
                        rdata = new object[population.Length, shtNames[i].Length];
                        for (int k = 0; k < population.Length; k++)
                        {
                            rdata[k, 0] = population[k].transYear.ToString();               shtNames[i][ 0] = "transYear";
                            rdata[k, 1] = population[k].population.ToString();              shtNames[i][1] = "population";
                            rdata[k, 2] = population[k].CPI.ToString();                     shtNames[i][ 2] = "CPI";
                            rdata[k, 3] = population[k].gasPrice.ToString();                shtNames[i][ 3] = "gasPrice";
                            rdata[k, 4] = population[k].income.ToString();                  shtNames[i][ 4] = "income";
                            rdata[k, 5] = population[k].carCafeSTD.ToString();              shtNames[i][5] = "carCafeSTD";
                            rdata[k, 6] = population[k].truckCafeSTD.ToString();            shtNames[i][6] = "truckCafeSTD";
                            rdata[k, 7] = population[k].TotAdBudget.ToString();               shtNames[i][7] = "TotAdBudget";
                            rdata[k, 8] = population[k].DealAdBudget.ToString();              shtNames[i][8] = "DealAdBudget";
                            rdata[k, 9] = population[k].cap_pg1.ToString(); shtNames[i][9] = "cap_pg1";
                            rdata[k, 10] = population[k].cap_pg2.ToString(); shtNames[i][10] = "cap_pg2";
                            rdata[k, 11] = population[k].cap_pg3.ToString(); shtNames[i][11] = "cap_pg3";
                            rdata[k, 12] = population[k].cap_pg4.ToString(); shtNames[i][12] = "cap_pg4";
                            rdata[k, 13] = population[k].cap_pg5.ToString(); shtNames[i][13] = "cap_pg5";

                        }
                        break;
                    case "vehdata":
                        rdata = new object[vData.Length, shtNames[i].Length];
                        for (int k = 0; k < vData.Length; k++)
                        {
                            rdata[k, 0] = vData[k].OEM.ToString();                          shtNames[i][ 0] = "OEM";
                            rdata[k, 1] = vData[k].segment.ToString();                      shtNames[i][ 1] = "segment";
                            rdata[k, 2] = vData[k].modelName.ToString();                    shtNames[i][ 2] = "Name";
                            rdata[k, 3] = vData[k].type.ToString();                         shtNames[i][ 3] = "type";
                            rdata[k, 4] = vData[k].modelYear.ToString();                    shtNames[i][ 4] = "modelYear";
                            rdata[k, 5] = vData[k].sGroupID.ToString();                     shtNames[i][ 5] = "sGroupID";
                            rdata[k, 6] = vData[k].mGroupID.ToString();                     shtNames[i][ 6] = "mGroupID";
                            rdata[k, 7] = vData[k].tGroupID.ToString(); shtNames[i][7] = "tGroupID";
                            rdata[k, 8] = vData[k].transYear.ToString(); shtNames[i][8]= "transYear";
                            rdata[k, 9] = vData[k].price.ToString();                        shtNames[i][ 9] = "price";
                            rdata[k, 10] = vData[k].volume.ToString();                       shtNames[i][10] = "volume";
                            rdata[k, 11] = vData[k].AdBrandSp.ToString();                   shtNames[i][ 11] = "AdBrandSp";
                            rdata[k, 12] = vData[k].AdRetailSp.ToString();                  shtNames[i][ 12] = "AdRetailSp";
                        }
                        break;
                    case "basedelta":
                        rdata = new object[Routines.baseDelta.Length, shtNames[i].Length];
                        for (int k = 0; k < baseDelta.Length; k++)
                        {
                            rdata[k, 0] = baseDelta[k].OEM.ToString();                       shtNames[i][ 0] = "OEM";
                            rdata[k, 1] = baseDelta[k].segment.ToString();                   shtNames[i][ 1] = "segment";
                            rdata[k, 2] = baseDelta[k].modelName.ToString();                 shtNames[i][ 2] ="Name";
                            rdata[k, 3] = baseDelta[k].type.ToString();                      shtNames[i][ 3] = "type";
                            rdata[k, 4] = baseDelta[k].modelYear.ToString();                 shtNames[i][ 4] = "modelYear";
                            rdata[k, 5] = baseDelta[k].sGroupID.ToString();                  shtNames[i][ 5] = "sGroupID";
                            rdata[k, 6] = baseDelta[k].mGroupID.ToString();                  shtNames[i][ 6] = "mGroupID";
                            rdata[k, 7] = baseDelta[k].delta0.ToString();                    shtNames[i][ 7] = "delta0";
                            rdata[k, 8] = baseDelta[k].styleAgeDep.ToString();               shtNames[i][ 8] = "styleAgeDep";
                            rdata[k, 9] = baseDelta[k].majImpact.ToString();                 shtNames[i][ 9] = "majImpact";
                            rdata[k, 10] = baseDelta[k].majStd.ToString();                   shtNames[i][ 10] = "majStd";
                            rdata[k, 11] = baseDelta[k].lifeTime.ToString();                 shtNames[i][ 11] = "lifeTime";
                            rdata[k, 12] = baseDelta[k].ScrapRatio.ToString();               shtNames[i][ 12] = "ScrapRatio";
                            rdata[k, 13] = baseDelta[k].coefBrand.ToString();                shtNames[i][ 13] = "coefBrand";
                            rdata[k, 14] = baseDelta[k].coefDeal.ToString();                 shtNames[i][ 14] = "coefDeal";
                            rdata[k, 15] = baseDelta[k].kBrand.ToString();                   shtNames[i][ 15] = "kBrand";
                            rdata[k, 16] = baseDelta[k].kDeal.ToString();                    shtNames[i][ 16] = "kDeal";
                            rdata[k, 17] = baseDelta[k].adjFactor.ToString();               shtNames[i][17] = "all_coef_factor";
                            rdata[k, 18] = baseDelta[k].ddelta.ToString(); shtNames[i][18] = "ddelta";
                            rdata[k, 19] = baseDelta[k].tGroupID.ToString(); shtNames[i][19] = "tGroupID";
                        } 
                        break;            
                    case "fmccdata":
                        rdata = new object[Routines.fmcCData.Length, shtNames[i].Length];
                        for (int k = 0; k < fmcCData.Length; k++)
                        {
                            rdata[k, 0]  = fmcCData[k].OEM.ToString();                      shtNames[i][ 0]  = "OEM";
                            rdata[k, 1]  = fmcCData[k].modelName.ToString();                shtNames[i][ 1]  = "Name";
                            rdata[k, 2] = fmcCData[k].interceptC.ToString();                shtNames[i][2] = "interceptCaptive";
                            rdata[k, 3]  = fmcCData[k].alpha1.ToString();                   shtNames[i][ 3]  = "alpha1";
                            rdata[k, 4]  = fmcCData[k].alpha2.ToString();                   shtNames[i][ 4]  = "alpha2";
                            rdata[k, 5]  = fmcCData[k].interceptL.ToString();               shtNames[i][ 5]  = "interceptLoyalty";
                            rdata[k, 6]  = fmcCData[k].alpha3.ToString();                   shtNames[i][ 6]  = "alpha3";
                            rdata[k, 7]  = fmcCData[k].interceptL2.ToString();              shtNames[i][ 7]  = "interceptL2";
                            rdata[k, 8]  = fmcCData[k].alphaL2.ToString();                  shtNames[i][ 8]  = "alphaL2";
                            rdata[k, 9]  = fmcCData[k].interceptL3.ToString();              shtNames[i][ 9]  = "interceptL3";
                            rdata[k, 10] = fmcCData[k].alphaL3.ToString();                  shtNames[i][ 10] = "alphaL3";
                            rdata[k, 11] = fmcCData[k].interceptL4.ToString();              shtNames[i][ 11] = "interceptL4";
                            rdata[k, 12] = fmcCData[k].alphaL4.ToString();                  shtNames[i][ 12] = "alphaL4";
                            rdata[k, 13] = fmcCData[k].interceptL5.ToString();              shtNames[i][ 13] = "interceptL5";
                            rdata[k, 14] = fmcCData[k].alphaL5.ToString();                  shtNames[i][ 14] = "alphaL5";
                            rdata[k, 15] = fmcCData[k].discountRate.ToString();             shtNames[i][ 15] = "discountRate";
                            rdata[k, 16] = fmcCData[k].interestRateDiff.ToString();         shtNames[i][ 16] = "interestRateDiff";
                        }
                        break;
                }
                WriteToEXCEL(rdata, shtNames[i], i + 1, shtName, dataFile);
            }
            return dataFile;
        }

        public static void loadUPdatedDec(string fileName, Decision[] decision)
        {
            if (decision == null)
            {
                MessageBox.Show("Decision does not exit!, Please Check!");
                return;
            }
            // Microsoft.Office.Interop.Excel.ApplicationClass app = new Microsoft.Office.Interop.Excel.ApplicationClass(); JF 2/29/16
            Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
            if (!File.Exists(fileName))
            {
                MessageBox.Show("The input Excel data file does not exist! Please check.", "Warning");
                return;
            }
            Workbook wb = app.Workbooks.Open(@fileName, Type.Missing,
                true, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, false, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            Sheets shts = wb.Worksheets;

            foreach (Worksheet sht in shts)
            {
                if (sht.Name.ToLower() != "decision") continue;
                int nRow, nCol;
                string endRange;
                sht.Activate();
                string shtName = sht.Name.ToString();
                nRow = 1;
                nCol = 156;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                Range rng = app.get_Range("A1", endRange);
                object[,] rdata = (object[,])rng.get_Value(Missing.Value);

                // column headings and nCol_
                int nCol_ = 0;
                ArrayList flds = new ArrayList();
                for (int i = 0; i < nCol; i++)
                {
                    string str;
                    try
                    {
                        str = Convert.ToString(rdata[1, i + 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nCol_ = i + 1;
                    str = str.Trim().ToLower().Replace(" ", "");
                    flds.Add(str);
                }
                // get data
                
                nRow = 65535;
                nCol = nCol_;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                rng = app.get_Range("A2", endRange);
                rdata = (System.Object[,])rng.get_Value(Missing.Value);

                // get nRow_
                int nRow_ = 0;
                for (int i = 1; i < nRow; i++)
                {
                    try
                    {
                        string str = Convert.ToString(rdata[i, 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nRow_ = i;
                }

                switch (shtName.ToLower())
                {

                    case "decision":
                     if ( decision.Length != (nRow_))
                     {
                         MessageBox.Show("something is wrong!");
                         return;
                     }
                        for (int i = 0; i < nRow_; i++)
                        {
                                                      
                           // decision[i] = new Decision();
                            decision[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            decision[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("modelname")]); ;
                            decision[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            decision[i].retailVolume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("retailvolume")]);
                            decision[i].rentalVolume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolume")]);
                            decision[i].rentalriskVolume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvolume")]);
                            decision[i].fleetVolume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolume")]);
                            decision[i].adspBrand = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("adspbrand")]);
                            decision[i].adspRetail = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("adspretail")]);


                        }
                        break;

                    default:
                        break;
                }
            }
            wb.Close(false, Type.Missing, Type.Missing);
            app.Workbooks.Close();
            app.Quit();

        }

        //export profit analyse
        public static void exportDecision(string filename, Decision[] dec)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(filename))
            { 
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(filename);
                File.Move(filename, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                    DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                File.Copy(dataDir + "\\empty.xls", filename);
            }
            else File.Copy(dataDir + "\\empty.xls", filename);

            string[] strHeader = new string[9];
            strHeader[0] = "OEM"; strHeader[1] = "modelName"; 
            strHeader[2] = "transYear"; strHeader[3] = "retailVolume";
            strHeader[4] = "rentalVolume"; strHeader[5] = "rentalriskVolume"; strHeader[6] = "fleetVolume";
            strHeader[7] = "adspBrand"; strHeader[8] = "adspRetail";  

            int totrow = dec.Length;
            //for (int i = 0; i < getProfits.Length; i++) totrow += getProfits[i].Length;

            object[,] objR = new object[totrow, strHeader.Length];

            for (int i = 0; i < dec.Length; i++)
            {
                objR[i, 0]  = dec[i].OEM;
                objR[i, 1]  = dec[i].modelName;
                objR[i, 2]  = dec[i].transYear;
                objR[i, 3]  = dec[i].retailVolume;
                objR[i, 4]  = dec[i].rentalVolume;
                objR[i, 5] = dec[i].rentalriskVolume;
                objR[i, 6] = dec[i].fleetVolume;
                objR[i, 7] = dec[i].adspBrand;
                objR[i, 8] = dec[i].adspRetail;
            }
        
            WriteToEXCEL(objR, strHeader, 1, "Decision", filename);
        }

        public static double acosh(double z)
        {
            if (z< 1)
            {
                MessageBox.Show("The argument of acosh is less than 1!");
                return 0.0;
            }
            double y=0.0;
            y= Math.Log(z+Math.Sqrt(z+1.0) * Math.Sqrt(z-1.0));
            return y;
        }

        public static void exportShadowPrice(string filename, Decision[] sPrice)//need David modify
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(filename))
            {
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(filename);
                File.Move(filename, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                    DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                File.Copy(dataDir + "\\empty.xls", filename);
            }
            else File.Copy(dataDir + "\\empty.xls", filename);

            string[] strHeader = new string[19];
            strHeader[0] = "OEM"; strHeader[1] = "modelName"; 
            strHeader[2] = "transYear"; strHeader[3] = "shadowP for retailV";
            strHeader[4] = "shadowP for rentalV"; strHeader[5] = "shadowP for rentalRiskV"; strHeader[6] = "shadowP for Fleet"; 
            strHeader[7] = "shadowP for adspBrand"; strHeader[8] = "shadowP for adspRetail";
            strHeader[9] = "shadowP for ProdConstr"; strHeader[10] = "shadowP for CarCAFE"; strHeader[11] = "shadowP for TruckCAFE";
            strHeader[12] = "shadowP for TotAdBudget"; strHeader[13] = "shadowP for DealAdBudget";
            strHeader[14] = "shadowP for cap_pg1"; strHeader[15] = "shadowP for cap_pg2";
            strHeader[16] = "shadowP for cap_pg3"; strHeader[17] = "shadowP for cap_pg4";
            strHeader[18] = "shadowP for cap_pg5"; 

            int totrow = sPrice.Length;
            //for (int i = 0; i < getProfits.Length; i++) totrow += getProfits[i].Length;

            object[,] objR = new object[totrow, strHeader.Length];

            for (int i = 0; i < sPrice.Length; i++)
            {
                objR[i, 0] = sPrice[i].OEM;
                objR[i, 1] = sPrice[i].modelName;
                objR[i, 2] = sPrice[i].transYear;
                objR[i, 3] = sPrice[i].retailVolume;
                objR[i, 4] = sPrice[i].rentalVolume;
                objR[i, 5] = sPrice[i].rentalriskVolume;
                objR[i, 6] = sPrice[i].fleetVolume;
                objR[i, 7] = sPrice[i].adspBrand;
                objR[i, 8] = sPrice[i].adspRetail;
                objR[i, 9] = sPrice[i].sPriceProd;
                objR[i, 10] = sPrice[i].sPriceCarCafe;
                objR[i, 11] = sPrice[i].sPriceTruckCafe;
                objR[i, 12] = sPrice[i].sPriceAdTot;
                objR[i, 13] = sPrice[i].sPriceAdDeal;
                objR[i, 14] = sPrice[i].sPriceCap_pg1;
                objR[i, 15] = sPrice[i].sPriceCap_pg2;
                objR[i, 16] = sPrice[i].sPriceCap_pg3;
                objR[i, 17] = sPrice[i].sPriceCap_pg4;
                objR[i, 18] = sPrice[i].sPriceCap_pg5;
            }

            WriteToEXCEL(objR, strHeader, 1, "ShadowPrice", filename);
        }


        public static void addNewCar(string fileName)
        {
            // Microsoft.Office.Interop.Excel.ApplicationClass app = new Microsoft.Office.Interop.Excel.ApplicationClass(); JF 2/29/16
            Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
            if (!File.Exists(fileName))
            {
                MessageBox.Show("The input Excel data file does not exist! Please check.", "Warning");
                return;
            }
            Workbook wb = app.Workbooks.Open(@fileName, Type.Missing,
                true, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, false, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            Sheets shts = wb.Worksheets;

            foreach (Worksheet sht in shts)
            {
                int nRow, nCol;
                string endRange;
                sht.Activate();
                string shtName = sht.Name.ToString();
                nRow = 1;
                nCol = 156;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                Range rng = app.get_Range("A1", endRange);
                object[,] rdata = (object[,])rng.get_Value(Missing.Value);

                // column headings and nCol_
                int nCol_ = 0;
                ArrayList flds = new ArrayList();
                for (int i = 0; i < nCol; i++)
                {
                    string str;
                    try
                    {
                        str = Convert.ToString(rdata[1, i + 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nCol_ = i + 1;
                    str = str.Trim().ToLower().Replace(" ", "");
                    flds.Add(str);
                }
                // get data
                nRow = 65535;
                nCol = nCol_;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                rng = app.get_Range("A2", endRange);
                rdata = (System.Object[,])rng.get_Value(Missing.Value);

                // get nRow_
                int nRow_ = 0;
                for (int i = 1; i < nRow; i++)
                {
                    try
                    {
                        string str = Convert.ToString(rdata[i, 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nRow_ = i;
                }
                // add new car
                switch (shtName.ToLower())
                {
                    
                    case "basedelta":
                        editbaseDelta = new BaseDelta[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editbaseDelta[i] = new BaseDelta();
                            editbaseDelta[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editbaseDelta[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editbaseDelta[i].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]);
                            int iidx = listBDelta.IndexOf(editbaseDelta[i].OEM + editbaseDelta[i].modelName + editbaseDelta[i].type);
                            if (iidx > -1)
                            {
                                MessageBox.Show("The Model has been exist! Please check.");
                            }
                            else
                            {
                                listBDelta.Add(editbaseDelta[i].OEM + editbaseDelta[i].modelName + editbaseDelta[i].type);
                                if (flds.IndexOf("delta0") > -1) editbaseDelta[i].delta0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("delta0")]);
                                if (flds.IndexOf("styleagedep") > -1) editbaseDelta[i].styleAgeDep = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("styleagedep")]);
                                if (flds.IndexOf("majimpact") > -1) editbaseDelta[i].majImpact = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("majimpact")]);
                                if (flds.IndexOf("majstd") > -1) editbaseDelta[i].majStd = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("majstd")]);
                                if (flds.IndexOf("lifetime") > -1) editbaseDelta[i].lifeTime = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("lifetime")]);
                                if (flds.IndexOf("scrapratio") > -1) editbaseDelta[i].ScrapRatio = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("scrapratio")]);
                                if (flds.IndexOf("coefbrand") > -1) editbaseDelta[i].coefBrand = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coefbrand")]);
                                if (flds.IndexOf("coefdeal") > -1) editbaseDelta[i].coefDeal = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("coefdeal")]);
                                if (flds.IndexOf("kbrand") > -1) editbaseDelta[i].kBrand = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("kbrand")]);
                                if (flds.IndexOf("kdeal") > -1) editbaseDelta[i].kDeal = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("kdeal")]);
                                if (flds.IndexOf("all_coef_factor") > -1) editbaseDelta[i].adjFactor = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("all_coef_factor")]);
                                if (flds.IndexOf("ddelta") > -1) editbaseDelta[i].ddelta = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("ddelta")]);
                               // if (flds.IndexOf("beta6") > -1) editbaseDelta[i].beta6 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("beta6")]);
                                if (flds.IndexOf("segment") > -1) editbaseDelta[i].segment = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("segment")]);
                                if (flds.IndexOf("sgroupid") > -1) editbaseDelta[i].sGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("sgroupid")]);
                                if (flds.IndexOf("mgroupid") > -1) editbaseDelta[i].mGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("mgroupid")]);
                                if (flds.IndexOf("tgroupid") > -1) editbaseDelta[i].tGroupID = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("tgroupid")]);
                                if (flds.IndexOf("modelyear") > -1) editbaseDelta[i].modelYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("modelyear")]);

                            }
                        }
                        
                            BaseDelta[] newbasedelta = new BaseDelta[baseDelta.Length + editbaseDelta.Length];
                            for (int k = 0; k < baseDelta.Length; k++)
                                newbasedelta[k] = baseDelta[k];
                            for (int j = baseDelta.Length; j < newbasedelta.Length; j++)
                                newbasedelta[j] = editbaseDelta[j - baseDelta.Length];
                            baseDelta = newbasedelta;
                        
                        break;
                        case "genfcons":
                        editgenFCons = new FordConstraint[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editgenFCons[i] = new FordConstraint();
                            editgenFCons[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editgenFCons[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editgenFCons[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            int iidx = listNewFCons.IndexOf(editgenFCons[i].OEM + editgenFCons[i].modelName + editgenFCons[i].transYear);
                            if (iidx > -1)
                            {
                                MessageBox.Show("The Model has been exist! Please check.");
                            }
                            else
                            {
                                listNewFCons.Add(editgenFCons[i].OEM + editgenFCons[i].modelName + editgenFCons[i].transYear);
                                if (flds.IndexOf("prodmin") > -1) editgenFCons[i].productionMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("prodmin")]);
                                if (flds.IndexOf("prodmax") > -1) editgenFCons[i].productionMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("prodmax")]);
                                if (flds.IndexOf("prodgroup_id") > -1) editgenFCons[i].prodgroup_id = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("prodgroup_id")]);
                                if (flds.IndexOf("rentalprice") > -1) editgenFCons[i].rentalPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalprice")]);
                                if (flds.IndexOf("fleetprice") > -1) editgenFCons[i].fleetPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetprice")]);
                                if (flds.IndexOf("variablecost") > -1) editgenFCons[i].variableCost = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("variablecost")]);
                                if (flds.IndexOf("remarketcostrental") > -1) editgenFCons[i].remarketCostRental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("remarketcostrental")]);
                                if (flds.IndexOf("rentalvolmin") > -1) editgenFCons[i].rentalVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolmin")]);
                                if (flds.IndexOf("rentalvolmax") > -1) editgenFCons[i].rentalVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvolmax")]);
                                if (flds.IndexOf("fleetvolmin") > -1) editgenFCons[i].fleetVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolmin")]);
                                if (flds.IndexOf("fleetvolmax") > -1) editgenFCons[i].fleetVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvolmax")]);
                                if (flds.IndexOf("retailvolmax") > -1) editgenFCons[i].retailVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("retailvolmax")]);

                                if (flds.IndexOf("dmretail") > -1) editgenFCons[i].DMretail = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dmretail")]);
                                if (flds.IndexOf("dmoffrental") > -1) editgenFCons[i].DMoffrental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("dmoffrental")]);

                                if (flds.IndexOf("rentalelast") > -1) editgenFCons[i].rentalElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalelast")]);
                                if (flds.IndexOf("rentalvol0") > -1) editgenFCons[i].rentalVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalvol0")]);
                                if (flds.IndexOf("fleetelast") > -1) editgenFCons[i].fleetElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetelast")]);
                                if (flds.IndexOf("fleetvol0") > -1) editgenFCons[i].fleetVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fleetvol0")]);
                                if (flds.IndexOf("gasmpg") > -1) editgenFCons[i].gasMPG = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasmpg")]);
                                if (flds.IndexOf("fueltarget") > -1) editgenFCons[i].fuelTarget = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget")]);
                                if (flds.IndexOf("vehtype") > -1) editgenFCons[i].vehType = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("vehtype")]);
                                if (flds.IndexOf("gasmpg2wd") > -1) editgenFCons[i].gasMPG2WD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("gasmpg2wd")]);
                                if (flds.IndexOf("fueltarget2wd") > -1) editgenFCons[i].fuelTarget2WD = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("fueltarget2wd")]);
                                if (flds.IndexOf("volpercent2wd") > -1) editgenFCons[i].volPercent2wd = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volpercent2wd")]);

                                if (flds.IndexOf("varcostfleet") > -1) editgenFCons[i].varCostFleet = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostfleet")]);
                                if (flds.IndexOf("varcostrental") > -1) editgenFCons[i].varCostRental = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostrental")]);
                                if (flds.IndexOf("varcostrisk") > -1) editgenFCons[i].varCostRentRisk = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("varcostrisk")]);
                                if (flds.IndexOf("rentalriskelast") > -1) editgenFCons[i].rentalriskElast = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskelast")]);
                                if (flds.IndexOf("rentalriskprice") > -1) editgenFCons[i].rentalriskPrice = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskprice")]);
                                if (flds.IndexOf("rentalriskvmax") > -1) editgenFCons[i].rentalriskVMax = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvmax")]);
                                if (flds.IndexOf("rentalriskvmin") > -1) editgenFCons[i].rentalriskVMin = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvmin")]);
                                if (flds.IndexOf("rentalriskvol0") > -1) editgenFCons[i].rentalriskVol0 = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("rentalriskvol0")]);
                            }
                        }
                        FordConstraint[] newgenFCons = new FordConstraint[genFCons.Length + editgenFCons.Length];
                        for (int i = 0; i < genFCons.Length; i++)
                            newgenFCons[i] = genFCons[i];
                        for (int j = genFCons.Length; j < newgenFCons.Length; j++)
                            newgenFCons[j] = editgenFCons[j - genFCons.Length];
                        genFCons = newgenFCons;
                        break;
                    case "genvehdata":
                        editgenVehData = new VehicleData[nRow_];
                        for (int i = 0; i < nRow_; i++)
                        {
                            editgenVehData[i] = new VehicleData();
                            editgenVehData[i].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            editgenVehData[i].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            editgenVehData[i].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            editgenVehData[i].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]);
                            editgenVehData[i].volume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volume")]);
                            //update
                            int ijdx = editgenVehData[i].transYear - baseYear - 1;
                            int iidx = listNewVData[ijdx].idx.IndexOf(editgenVehData[i].OEM + editgenVehData[i].modelName + editgenVehData[i].transYear + editgenVehData[i].type);
                            if (iidx > -1)
                            {
                                MessageBox.Show("The Model has been exist! Please check.");
                            }
                            VehicleData[] tmpveh = new VehicleData[genVehData[ijdx].Length+1];
                            for (int j = 0; j < genVehData[ijdx].Length; j++)
                                tmpveh[j] = genVehData[ijdx][j];
                            tmpveh[tmpveh.Length] = editgenVehData[i];
                            genVehData[ijdx] = tmpveh;
                        }
                        break;
                    default:
                        break;
                }
                   
            }
            wb.Close(false, Type.Missing, Type.Missing);
            app.Workbooks.Close();
            app.Quit();

        }


        public static void exportADD(string fileName, string[] oemnames, string[] vars,string OEM,int LaunchYr,
             ArrayList basedelta2, ArrayList genvehdata2, ArrayList genfcons2)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(fileName))
            {
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(fileName);
                try
                {
                    File.Move(fileName, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                        DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                }
                catch
                {
                    MessageBox.Show("Please close file " + fileName + ",\r\n, then to continue.");
                    return;
                }
                File.Copy(dataDir + "\\empty.xls", fileName);
            }
            else File.Copy(dataDir + "\\empty.xls", fileName);

            Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbooks books = app.Workbooks;

            Microsoft.Office.Interop.Excel._Workbook book = app.Workbooks.Open(fileName, Type.Missing, false, true, Type.Missing,
                Type.Missing, true, Type.Missing, Type.Missing, true, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            Microsoft.Office.Interop.Excel.Sheets sheets = book.Worksheets;

            ArrayList shtNames = new ArrayList();
            Regex sp = new Regex("( )");
           
            if (basedelta2.Count > 0)
            {
                string[] tmp = sp.Split(basedelta2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                basedelta3 = (Microsoft.Office.Interop.Excel.Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                basedelta3.Name = tmp[0];
                shtNames.Add(basedelta3.Name);

                Object[] objHeader = new object[3 + basedelta2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "Type";
                for (int j = 0; j < basedelta2.Count; j++)
                {
                    string[] tm = sp.Split(basedelta2[j].ToString());
                    objHeader[3 + j] = tm[2];
                }
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = basedelta3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToAdd(tmp[0], objHeader, oemnames,OEM,LaunchYr);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = basedelta3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            
            if (genvehdata2.Count > 0)
            {
                string[] tmp = sp.Split(genvehdata2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                genvehdata3 = (Microsoft.Office.Interop.Excel._Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                genvehdata3.Name = tmp[0];
                shtNames.Add(genvehdata3.Name);

                Object[] objHeader = new object[4 + genvehdata2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "transYear"; objHeader[3] = "Type";
                for (int j = 0; j < genvehdata2.Count; j++)
                {
                    string[] tm = sp.Split(genvehdata2[j].ToString());
                    objHeader[4 + j] = tm[2];
                }
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = genvehdata3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToAdd(tmp[0], objHeader, oemnames,OEM,LaunchYr);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = genvehdata3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }
            if (genfcons2.Count > 0)
            {
                string[] tmp = sp.Split(genfcons2[0].ToString());
                Microsoft.Office.Interop.Excel._Worksheet
                genfcons3 = (Microsoft.Office.Interop.Excel.Worksheet)book.Worksheets.Add(Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                genfcons3.Name = tmp[0];
                shtNames.Add(genfcons3.Name);

                Object[] objHeader = new object[3 + genfcons2.Count];
                objHeader[0] = "OEM"; objHeader[1] = "Name"; objHeader[2] = "transYear";
                for (int j = 0; j < genfcons2.Count; j++)
                {
                    string[] tm = sp.Split(genfcons2[j].ToString());
                    objHeader[3 + j] = tm[2];
                }
                string endRange = Routines.GetRangeLetter(objHeader.Length) + "1";
                Range rng = genfcons3.get_Range("A1", endRange);
                rng.Value2 = objHeader;

                object[,] objR = getObjDataToAdd(tmp[0], objHeader, oemnames,OEM,LaunchYr);
                if (objR != null)
                {
                    int rowtot = objR.Length / objHeader.Length + 1;
                    endRange = Routines.GetRangeLetter(objHeader.Length) + rowtot;
                    rng = genfcons3.get_Range("A2", endRange);
                    rng.Value2 = objR;
                }
            }

            foreach (Microsoft.Office.Interop.Excel._Worksheet sht in sheets)
            {
                int idx = shtNames.IndexOf(sht.Name.ToString());
                if (idx < 0 && sheets.Count > 1) sht.Delete();
            }

            foreach (Microsoft.Office.Interop.Excel.Workbook b in app.Workbooks) { b.Close(true, Type.Missing, Type.Missing); }
            app.Workbooks.Close();
            app.Quit();
        }

        public static void exportOptdata(string filename, VehicleData[][] optData)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(filename))
            {
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(filename);
                File.Move(filename, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                    DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                File.Copy(dataDir + "\\empty.xls", filename);
            }
            else File.Copy(dataDir + "\\empty.xls", filename);

            string[] strHeader = new string[9];
            strHeader[0] = "OEM"; strHeader[1] = "Segment";
            strHeader[2] = "Name"; strHeader[3] = "Type";
            strHeader[4] = "price"; strHeader[5] = "volume"; strHeader[6] = "transyear";
            strHeader[7] = "adspendbrand"; strHeader[8] = "adspendretail";

            int totrow = 0;
            for (int i = 0; i < optData.Length; i++)
            {
                for (int j = 0; j < optData[i].Length; j++)
                {
                    totrow++;
                }
            }

            object[,] objR = new object[totrow, strHeader.Length];
            int k = 0;
            for (int i = 0; i < optData.Length; i++)
            {
                for (int j = 0; j < optData[i].Length; j++)
                {
                    objR[k, 0] = optData[i][j].OEM;
                    objR[k, 1] = optData[i][j].segment;
                    objR[k, 2] = optData[i][j].modelName;
                    objR[k, 3] = optData[i][j].type;
                    objR[k, 4] = optData[i][j].price;
                    objR[k, 5] = optData[i][j].volume;
                    objR[k, 6] = optData[i][j].transYear;
                    objR[k, 7] = optData[i][j].AdBrandSp;
                    objR[k, 8] = optData[i][j].AdRetailSp;
                    k++;
                }
            }

            WriteToEXCEL(objR, strHeader, 1, "optData", filename);
        }

        public static void loadUPdatedOpt(string fileName, VehicleData[][] optData, ArrayList[] listOpt)
        {
            if (optData == null)
            {
                MessageBox.Show("Decision does not exit!, Please Check!");
                return;
            }
            // Microsoft.Office.Interop.Excel.ApplicationClass app = new Microsoft.Office.Interop.Excel.ApplicationClass(); JF 2/29/16
            Microsoft.Office.Interop.Excel.Application app = new Microsoft.Office.Interop.Excel.Application();
            if (!File.Exists(fileName))
            {
                MessageBox.Show("The input Excel data file does not exist! Please check.", "Warning");
                return;
            }
            Workbook wb = app.Workbooks.Open(@fileName, Type.Missing,
                true, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, false, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            Sheets shts = wb.Worksheets;

            foreach (Worksheet sht in shts)
            {
                if (sht.Name.ToLower() != "optdata") continue;
                int nRow, nCol;
                string endRange;
                sht.Activate();
                string shtName = sht.Name.ToString();
                nRow = 1;
                nCol = 156;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                Range rng = app.get_Range("A1", endRange);
                object[,] rdata = (object[,])rng.get_Value(Missing.Value);

                // column headings and nCol_
                int nCol_ = 0;
                ArrayList flds = new ArrayList();
                for (int i = 0; i < nCol; i++)
                {
                    string str;
                    try
                    {
                        str = Convert.ToString(rdata[1, i + 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nCol_ = i + 1;
                    str = str.Trim().ToLower().Replace(" ", "");
                    flds.Add(str);
                }
                // get data

                nRow = 65535;
                nCol = nCol_;
                endRange = GetRangeLetter(nCol) + nRow.ToString();
                rng = app.get_Range("A2", endRange);
                rdata = (System.Object[,])rng.get_Value(Missing.Value);

                // get nRow_
                int nRow_ = 0;
                for (int i = 1; i < nRow; i++)
                {
                    try
                    {
                        string str = Convert.ToString(rdata[i, 1]);
                        if (str.Replace(" ", "") == "") break;
                    }
                    catch { break; }
                    nRow_ = i;
                }

                switch (shtName.ToLower())
                {

                    case "optdata":

                        for (int i = 0; i < nRow_; i++)
                        {

                            int k = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]) - Routines.baseYear - 1;
                            // int indTY = k;
                            // optdata[j][i].OEM + optdata[j][i].modelName + optdata[j][i].type;
                            string oem = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            string modelname = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            string type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]);
                            int j = listOpt[k].IndexOf(oem + modelname + type);

                            optData[k][j].OEM = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("oem")]);
                            optData[k][j].segment = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("segment")]); ;
                            optData[k][j].modelName = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("name")]);
                            optData[k][j].type = Convert.ToString(rdata[i + 1, 1 + flds.IndexOf("type")]);
                            optData[k][j].price = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("price")]);
                            optData[k][j].volume = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("volume")]);
                            optData[k][j].transYear = Convert.ToInt32(rdata[i + 1, 1 + flds.IndexOf("transyear")]);
                            optData[k][j].AdBrandSp = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("adspendbrand")]);
                            optData[k][j].AdRetailSp = Convert.ToDouble(rdata[i + 1, 1 + flds.IndexOf("adspendretail")]);
                            /*
                            string key = optData[k][j].OEM + optData[k][j].modelName + optData[k][j].type;
                            int idx = Routines.listBDelta.IndexOf(key);
                            if (idx != -1)
                            {
                                int mId = optData[k][j].mGroupID;
                                int sId = optData[k][j].sGroupID;
                                double rhom = Routines.mGroup[mId].rho;
                                double alpham = Routines.mGroup[mId].alpha* Routines.baseDelta[idx].adjFactor;
                                double sigmas = Routines.sGroup[sId].sigma;
                                double scrapRatio = Routines.baseDelta[idx].ScrapRatio;
                                double lfTime = Routines.baseDelta[idx].lifeTime;
                                double deltaj = optData[k][j].delta;
                                double Kb = Routines.baseDelta[idx].kBrand; 
                                double Kr = Routines.baseDelta[idx].kDeal;

                                double ImpADBrand = Routines.baseDelta[idx].coefBrand * Routines.baseDelta[idx].adjFactor * optData[k][j].AdBrandSp / (optData[k][j].AdBrandSp + Kb);
                                double ImpADDeal = Routines.baseDelta[idx].coefDeal * Routines.baseDelta[idx].adjFactor * optData[k][j].AdRetailSp / (optData[k][j].AdRetailSp + Kr);

                                if (Routines.optiType == 2 && optData[k][j].modelName != "F250" && optData[k][j].modelName != "F350")
                                {
                                    int idx_refresh = Routines.listRefresh.IndexOf(optData[k][j].OEM + optData[k][j].modelName + optData[k][j].transYear);
                                    if (idx_refresh > -1)
                                    {
                                        double ADb_factor = 2.0;
                                     
                                        double ADd_ref = 0.0;
                                        if (Routines.refresh[idx_refresh].successRate >= 0.0 && Routines.refresh[idx_refresh].successRate < 1.0)
                                            ADd_ref = 0.2;
                                        if (Routines.refresh[idx_refresh].successRate >= 1.0)
                                            ADd_ref = 0.5;

                                        ImpADBrand = Routines.baseDelta[idx].coefBrand * Routines.baseDelta[idx].adjFactor * (optData[k][j].AdBrandSp - ADb_factor * Kb) / (Math.Abs(optData[k][j].AdBrandSp - ADb_factor * Kb) + Kb);
                                        ImpADDeal = Routines.baseDelta[idx].coefDeal * Routines.baseDelta[idx].adjFactor * (optData[k][j].AdRetailSp + ADd_ref * Kr) / (optData[k][j].AdRetailSp + ADd_ref * Kr + Kr);
                                    }

                                    int idx_new = Routines.listLaunch.IndexOf(optData[k][j].OEM + optData[k][j].modelName + optData[k][j].transYear);
                                    if (idx_new > -1)
                                    {

                                        ImpADBrand = Routines.baseDelta[idx].coefBrand * Routines.baseDelta[idx].adjFactor * (optData[k][j].AdBrandSp - 5.0 * Kb) / (Math.Abs(optData[k][j].AdBrandSp - 5.0 * Kb) + Kb);
                                        ImpADDeal = Routines.baseDelta[idx].coefDeal * Routines.baseDelta[idx].adjFactor * (optData[k][j].AdRetailSp + 0.5 * Kr) / (optData[k][j].AdRetailSp + 0.5 * Kr + Kr);

                                    }
                                }

                                double ImpAD = ImpADBrand + ImpADDeal;

                                double ImpMac = Routines.mGroup[mId].coeOfGasprice * Routines.baseDelta[idx].adjFactor * Routines.gasImpact[indTY][mId] + Routines.mGroup[mId].coeOfIncome * Routines.baseDelta[idx].adjFactor * Routines.incomeImpact[indTY][mId];
                                ImpMac = Routines.mGroup[mId].coeOfGasprice * Routines.baseDelta[idx].adjFactor * Routines.mGroup[mId].initialGas + Routines.mGroup[mId].coeOfIncome * Routines.baseDelta[idx].adjFactor * Routines.mGroup[mId].initialIncome;


                                optData[k][j].DelsubP = deltaj - alpham * optData[k][j].price / (lfTime) * (1 - scrapRatio) + (ImpAD + ImpMac);

                            }
                            */

                        }
                        break;

                    default:
                        break;
                }
            }
            wb.Close(false, Type.Missing, Type.Missing);
            app.Workbooks.Close();
            app.Quit();

        }
        public static void exportVehdata(string filename, VehicleData[][] optData)
        {
            string dataDir = Directory.GetCurrentDirectory();
            if (File.Exists(filename))
            {
                Regex sl = new Regex("\\\\");
                string[] tmp = sl.Split(filename);
                File.Move(filename, dataDir + "\\Data\\" + tmp[tmp.Length - 1].Remove(tmp[tmp.Length - 1].Length - 4) +
                    DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".xls");
                File.Copy(dataDir + "\\empty.xls", filename);
            }
            else File.Copy(dataDir + "\\empty.xls", filename);

            string[] strHeader = new string[9];
            strHeader[0] = "OEM"; strHeader[1] = "Segment";
            strHeader[2] = "Name"; strHeader[3] = "Type";
            strHeader[4] = "price"; strHeader[5] = "volume"; strHeader[6] = "transyear";
            strHeader[7] = "Elasticity"; 

            int totrow = 0;
            for (int i = 0; i < optData.Length; i++)
            {
                for (int j = 0; j < optData[i].Length; j++)
                {
                    totrow++;
                }
            }

            object[,] objR = new object[totrow, strHeader.Length];
            int k = 0;
            for (int i = 0; i < optData.Length; i++)
            {
                for (int j = 0; j < optData[i].Length; j++)
                {
                    objR[k, 0] = optData[i][j].OEM;
                    objR[k, 1] = optData[i][j].segment;
                    objR[k, 2] = optData[i][j].modelName;
                    objR[k, 3] = optData[i][j].type;
                    objR[k, 4] = optData[i][j].price;
                    objR[k, 5] = optData[i][j].volume;
                    objR[k, 6] = optData[i][j].transYear;
                    objR[k, 7] = optData[i][j].Elasticity;
                     k++;
                }
            }

            WriteToEXCEL(objR, strHeader, 1, "optData", filename);
        }

        /////////////////////////////////////////////////////////////////////////////////
    }
}
